{"meta":{"title":"Chanhy's Blog","subtitle":"记录生活，记录学习，分享知识","description":"陈华阳个人博客，记录生活，记录学习，分享知识","author":"Chanhy","url":"https://www.chyds.cn"},"pages":[{"title":"分类","date":"2018-03-23T02:40:11.000Z","updated":"2018-03-25T04:53:16.541Z","comments":false,"path":"categories/index.html","permalink":"https://www.chyds.cn/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-03-23T02:36:13.000Z","updated":"2018-03-25T04:53:04.556Z","comments":false,"path":"tags/index.html","permalink":"https://www.chyds.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"第五节：编程思想，对象，JSON，简单类型和复杂类型","slug":"第五节：编程思想，对象，JSON，简单类型和复杂类型","date":"2019-01-28T11:30:21.000Z","updated":"2019-01-28T14:44:48.708Z","comments":true,"path":"2019/01/28/第五节：编程思想，对象，JSON，简单类型和复杂类型/","link":"","permalink":"https://www.chyds.cn/2019/01/28/第五节：编程思想，对象，JSON，简单类型和复杂类型/","excerpt":"","text":"编程思想把一些生活中做事的经验融入到程序中 面向过程凡事亲力亲为，所有的事情过程都要清楚，注重的是过程 面向对象 提出需求，找到对象，对象解决这个问题，我么要结果，注重的是结果 面对对象的特性：封装，继承，多态，（抽象性） js不是面向对象的语言，但是可以模拟面向对象的思想 js是一门基于对象的语言 万物皆对象 对象对象：有属性和方法，特指的某个事物 对象：一组无序属性的集合，属性的值可以是任意的类型 什么是对象12345现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。举例： 一部车，一个手机车是一类事物，门口停的那辆车才是对象 特征：红色、四个轮子 行为：驾驶、刹车 JavaScript中的对象123456JavaScript中的对象其实就是生活中对象的一个抽象JavaScript的对象是无序属性的集合。 其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。对象的行为和特征 特征---属性 行为---方法 事物的特征在对象中用属性来表示。 事物的行为在对象中用方法来表示。 创建对象的方式调用系统的构造函数调用系统的构造函数创建对象 语法： 1var 变量名 = new Object(); // Object 是系统的构造函数 例子： 123456789101112131415// 实例化对象var obj = new Object();// 对象有特征---属性和行为---方法// 添加属性---如果添加属性？ 对象.名字 = 值;obj.name = \"小苏\";obj.age = 38;obj.sex = \"女\";// 添加方法---如果添加方法？ 对象.名字 = 函数;obj.eat = function ()&#123; console.log(\"这是一个方法\");&#125;;console.log(obj.name); // 获取属性console.log(obj.age); // 获取属性obj.eat(); // 调用方法 工厂模式工厂模式创建对象：一次性创建多个对象，把创建对象的代码封装在一个函数中 例子： 123456789101112131415161718// 工厂模式创建对象function createObject(name,age) &#123; var obj = new Object();// 创建对象 // 添加属性 obj.name = name; obj.age = age; // 添加方法 obj.sayHi = function () &#123; console.log(\"阿涅哈斯诶呦,我叫:\" + this.name + \"我今年:\" + this.age); &#125;; return obj;&#125;// 调用函数创建对象var per1 = createObject(\"小芳\",20);per1.sayHi();//调 用函数创建对象var per2 = createObject(\"小红\",30);per2.sayHi(); 自定义构造函数 自定义构造函数创建对象：我要自己定义一个构造函数，自定义构造函数，创建对象 函数和构造函数的区别：名字是不是大写（首字母） 例子： 123456789101112131415161718192021function Person(name,age) &#123; this.name=name; this.age=age; this.sayHi=function () &#123; console.log(\"我叫:\"+this.name+\",年龄是:\"+this.age); &#125;;&#125;// 自定义构造函数创建对象:先自定义一个构造函数,创建对象var obj=new Person(\"小明\",10);console.log(obj.name);console.log(obj.age);obj.sayHi();var obj2=new Person(\"小红\",20);console.log(obj2.name);console.log(obj2.age);obj2.sayHi();console.log(obj instanceof Person); // trueconsole.log(obj2 instanceof Person); // true 自定义构造函数创建对象做了四件事 在内存中开辟（申请一块空闲的）空间，存储创建的新的对象 把this设置为当前的对象 设置对象的属性和方法值 把this这个对象返回 字面量的方式字面量的方式创建对象 例子： 12345678910var obj=&#123;&#125;; // 空对象// 添加属性obj.name=\"小白\";obj.age=10;// 添加方法obj.sayHi=function () &#123; console.log(\"我是:\"+this.name);&#125;;// 调用方法obj.sayHi(); 优化后的写法 12345678910111213141516// 推荐使用这种写法var obj2=&#123; // 添加属性 name:\"小明\", age:20, // 添加方法 sayHi:function () &#123; console.log(\"我是:\"+this.name); &#125;, eat:function () &#123; console.log(\"吃了\"); &#125;&#125;;// 调用方法obj2.sayHi();obj2.eat(); 总结对象 字面量方式创建对象的缺陷：一次性的对象 1234567var obj=&#123; name:\"小明\", age:38, sex:\"女\"&#125;;obj.name=\"小三\";console.log(obj.name); 点语法：对象.名字=值; 对象.名字=函数;===没有什么点,就有了 instanceof关键字使用： 如何获取该变量（对象）是不是属于什么类型的？ 语法： 1变量 instanceof 类型的名字 // 布尔类型 例子： 12var dog = new Object();console.log(dog instanceof Oject); 创建对象的内存图 设置和获取属性的另一种写法 1对象名[&quot;属性名&quot;] = 值或者方法; 例子： 12345678910111213function Person(name,age) &#123; this.name=name; this.age=age; this.play=function () &#123; console.log(\"喜欢玩游戏\"); &#125;;&#125;var obj=new Person(\"卡卡西\",20);obj[\"name\"]=\"佐助\"; // 设置属性console.log(obj[\"name\"]); // 获取属性值obj[\"play\"](); // 调用方法 JSON格式的数据及遍历JSON格式的数据 JSON格式的数据：一般都是成对的，是键值对 json也是一个对象，数据都是成对的，一般json格式的数据无论是键还是值都是用双引号括起来的 例子： 12345var json = &#123; \"name\":\"小明\", \"age\":\"10\", \"sex\":\"男\"&#125;; 遍历 遍历对象，是不能通过for循环遍历的 可以通过for-in循环 123456789var json = &#123; \"name\": \"小明\", \"age\": \"10\", \"sex\": \"男\"&#125;;// key是一个变量,这个变量中存储的是该对象的所有的属性的名字for (var key in json) &#123;console.log(key + \"===========\" + json[key]);&#125; 简单类型和复杂类型 原始数据类型：number，string，boolean，undefined，null，object 简单类型（基本类型），值类型：number，string，boolean 复杂类型（引用类型）：object 空类型：undefined，null 值类型的值在哪一块空间中存储？在栈中存储 引用类型的值在哪一块空间中存储？对象在堆上存储，地址在栈上存储 值类型和引用类型的传递 值类型之间传递，传递的是值 引用类型之间传递，传递的是地址（引用） 值类型作为函数的参数，传递的是值 引用类型作为函数的参数，传递的是地址（引用）","categories":[{"name":"JavaScript基础","slug":"JavaScript基础","permalink":"https://www.chyds.cn/categories/JavaScript基础/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.chyds.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.chyds.cn/tags/JavaScript/"},{"name":"学习","slug":"学习","permalink":"https://www.chyds.cn/tags/学习/"}]},{"title":"第四节：作用域，预解析","slug":"第四节：作用域，预解析","date":"2019-01-28T09:43:39.000Z","updated":"2019-01-28T11:21:09.058Z","comments":true,"path":"2019/01/28/第四节：作用域，预解析/","link":"","permalink":"https://www.chyds.cn/2019/01/28/第四节：作用域，预解析/","excerpt":"","text":"作用域作用域：使用范围 全局变量全局变量：声明的变量是使用var声明的，那么这个变量就是全局变量，全局变量可以在页面的任何位置使用 除了函数以外，其他的任何位置定义的变量都是全局变量 全局变量，如果页面不关闭，那么就不会释放， 就会占空间，消耗内存 局部变量局部变量：在函数内部定义的变量是局部变量，外面不能使用 全局作用域全局作用域：全局变量的使用范围 局部作用域局部作用域：局部变量的使用范围 块级作用域块级作用域：一对大括号就可以看成是一块，在这块区域中定义的变量，只能在这个区域中使用，但是在js中在这个块级作用域中定义的变量，外面也能使用； 说明：js中没有块级作用域，只有函数除外 1234&#123; var num = 10;&#125;console.log(num); 扩展：隐式全局变量隐式全局变量：声明的变量没有var，就叫隐式全局变量 12345function f1()&#123; number = 10; // 隐式全局变量&#125;f1();console.log(number); // 隐式全局变量是全局作用域 123456var num1 = 10; // 全局变量num2 = 20; // 隐式全局变量delete num1; // 把num1删除delete num2; // 把num2删除console.log(typeof num1); // number类型，说明num1没有被删除console.log(typeof num2); // undefined，说明num2被删除了 全局变量是不能被删除的，隐式全局变量是可以被删除的 作用域链 只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。 将这样的所有的作用域列出来，可以有一个结构：函数内指向函数外的链式结构。就称作作用域链 1234567891011// 案例1：function f1() &#123; function f2() &#123; &#125;&#125;var num = 456;function f3() &#123; function f4() &#123; &#125;&#125; 12345678910// 案例2function f1() &#123; var num = 123; function f2() &#123; console.log( num ); &#125; f2();&#125;var num = 456;f1(); 预解析预解析：提前解析代码 把变量的声明提前了===提前到当前所在的作用域的最上面 函数的声明也会被提前===提前到当前所在的作用域的最上面 12345678// 预解析前console.log(num);var num = 10;// 预解析后,把声明提前了var num;console.log(num); //undefinednum = 10; 12345678910111213141516171819// 预解析前function f1()&#123; console.log(\"第一个f1\");&#125;f1(); // 结果是：第二个f1function f1()&#123; console.log(\"第二个f1\");&#125;f1(); // 结果是：第二个f1// 预解析后function f1()&#123; console.log(\"第一个f1\");&#125;function f1()&#123; console.log(\"第二个f1\");&#125;f1(); // 结果是：第二个f1f1(); // 结果是：第二个f1 预解析局部作用预的问题 预解析中，变量的提升，只会在当前的作用预提升，提前到当前的作用域的最上面 函数中的变量只会在提前到当前的作用域的最前面，不会出去 预解析会分多段（多对script标签中函数重名，预解析的时候不会冲突） 案例1234567891011121314// 预解析前f1(); // 不能调用var f1 = function ()&#123; console.log(a); var a = 10;&#125;// 预解析后var f1;f1(); // 不能调用f1 = function ()&#123; console.log(a); var a = 10;&#125; 123456789101112131415161718192021222324252627// 预解析前f1();console.log(c);console.log(b);console.log(a);function f1()&#123; var a = b = c = 9; console.log(a); console.log(b); console.log(c);&#125;// 预解析后function f1() &#123; var a;//局部变量 a=9; //隐式全局变量 b=9; c=9; console.log(a);//9 console.log(b);//9 console.log(c);//9&#125;f1();console.log(c);// 9console.log(b);// 9console.log(a);//报错","categories":[{"name":"JavaScript基础","slug":"JavaScript基础","permalink":"https://www.chyds.cn/categories/JavaScript基础/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.chyds.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.chyds.cn/tags/JavaScript/"},{"name":"学习","slug":"学习","permalink":"https://www.chyds.cn/tags/学习/"}]},{"title":"第三节：break/continue关键字，数组，函数","slug":"第三节：break-continue关键字，数组，函数","date":"2019-01-28T03:47:07.000Z","updated":"2019-01-28T07:59:49.934Z","comments":true,"path":"2019/01/28/第三节：break-continue关键字，数组，函数/","link":"","permalink":"https://www.chyds.cn/2019/01/28/第三节：break-continue关键字，数组，函数/","excerpt":"","text":"break关键字如果在循环中使用,遇到了break,则立刻跳出当前所在的循环 例子：找到100到200之间第一个可以被7整除的数字 123456for(var i=100;i&lt;=200;i++)&#123; if(i%7==0)&#123; console.log(i); break; &#125;&#125; continue关键字在循环中如果遇到continue关键字,直接开始下一次循环 例子：求100-200之间所有的奇数的和（用continue） 12345678910111213var sum=0;var i=100;while(i&lt;=200)&#123; //判断是不是偶数 if(i%2==0)&#123; //如果是偶数跳过这个数字 i++;//102 continue; &#125; sum+=i; i++;&#125;console.log(sum); 数组 数组：一组有序的数据 数组的作用：可以一次性存储多个数据 数组元素：数组中存储的每个数据，都可以叫做数组的元素，比如：存储了3个数据，数组中有3个元素 数组长度：就是数组的元素的个数，比如有3个元素，这个数组的长度是3 数组索引（下标）：用来存储或者访问数组中数据 数组的定义通过构造函数创建数组语法： 1var 数组名 = new Array(); 12// 通过构造函数的方式定义一个数组var array = new Array(); // 没有数组，空数组 12var 数组名 = new Array(长度);// 通过构造函数的方法创建的数组中没有数据，但是有长度，数组中的每个值就是undefined 通过字面量的方式创建数组语法： 1var 数组名 = []; // 空数组 1234567891011// 创建一个空数组var arr1 = []; // 创建一个包含3个数值的数组，多个数组项以逗号隔开var arr2 = [1, 3, 4]; // 创建一个包含2个字符串的数组var arr3 = ['a', 'c']; // 可以通过数组的length属性获取数组的长度console.log(arr3.length);// 可以设置length属性改变数组中元素的个数arr3.length = 0; 总结数组基础知识 数组:存储一组有序的数据 数组的作用:一次性存储多个数据 数组的定义方式:1.构造函数定义数组: var 数组名=new Array();2.字面量方式定义数组: var 数组名=[]; var 数组名=new Array();空数组 var 数组名=new Array(值);数组定义了,有长度 var 数组名=new Array(值1,值2,值3….);定义数组并且有多个数据 var 数组名=[];空数组 var 数组名=[值1,值2,值3];有三个数据 数组元素:就是数组中存储的数据 数组长度:就是数组中元素的个数 数组索引(下标):从0开始,到数组的长度减1结束 通过下标设置数组的元素值: 数组名[索引]=值 通过下标访问数组的元素值: 数组名[索引] 遍历数组使用for循环遍历数组 12345var arr=[10,20,30,40,50,60,70,80,90,100];// 小于的是数组的长度--个数for(var i=0;i&lt;arr.length;i++)&#123; console.log(arr[i]);&#125; 数组的案例案例1：求数组中所有元素的和 123456var arr1 = [10, 20, 30, 40, 50];var sum = 0;for (var i = 0; i &lt; arr1.length; i++) &#123; sum += arr1[i];&#125;console.log(sum); 案例2：求数组中所有元素中的最大值 123456789var arr2 = [1, 3, 2, 5, 10, 100, 50];// 假设max变量中存储的是最大值var max = arr2[0];for (var i = 0; i &lt; arr2.length; i++) &#123; // 判断这个变量的值和数组中每个元素的值是不是最大值 if (max &lt; arr2[i]) &#123; max = arr2[i]; &#125;&#125; 案例3：倒序遍历数组 1234var arr3 = [10, 20, 30, 40, 50, 100];for(var i=arr3.length-1;i&gt;=0;i--)&#123; console.log(arr3[i]);&#125; 案例4：把数组中每个元素用|拼接到一起产生一个字符串并输出 123456var names=[\"卡卡西\",\"佐助\",\"鸣人\",\"大蛇丸\",\"雏田\",\"小苏\",\"凤姐\",\"黑崎一护\"];var str=\"\";// 空的字符串for(var i=0;i&lt;names.length-1;i++)&#123; str+=names[i]+\"|\";&#125;console.log(str+names[names.length-1]); 案例5：去掉数组中重复的0，把其他的数据放在一个新的数组中 123456789var arr = [10, 0, 20, 0, 30, 0, 50];var newArr=[];// 新数组,用来存放第一个数组中所有非0的数字for(var i=0;i&lt;arr.length;i++)&#123; if(arr[i]!=0)&#123; newArr[newArr.length]=arr[i]; &#125;&#125;// 把新数组的长度作为下标使用,数组的长度是可以改变的console.log(newArr); 案例6：反转数组======把数组中的数据的位置调换 123456789var array = [10, 20, 30, 40, 50];// 循环的目的是控制交换的次数for (var i = 0; i &lt; array.length / 2; i++) &#123; // 先把第一个元素的值放在第三方变量中 var temp = array[i]; array[i] = array[array.length - 1 - i]; array[array.length - 1 - i] = temp;&#125;console.log(array); 数组的冒泡排序冒泡排序：把所有的数据按照一定的顺序进行排列(从小到大,从大到下) 12345678910111213var arr = [10, 0, 100, 20, 60, 30];// 循环控制比较的轮数for (var i = 0; i &lt; arr.length - 1; i++) &#123; // 控制每一轮的比较的次数 for (var j = 0; j &lt; arr.length - 1 - i; j++) &#123; if (arr[j] &lt; arr[j + 1]) &#123; var temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125; &#125;&#125;console.log(arr); 函数 函数：把一坨重复的代码封装，在需要的时候直接调用 函数的作用：代码的重用 函数的定义函数声明 123function 函数名字()&#123; 函数体&#125; 特点：函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 tellStory sayHello等 函数的调用调用函数的语法： 1函数名(); 特点：函数体只有在调用的时候才会执行，调用需要()进行调用。可以调用多次(重复使用) 代码示例： 1234567891011121314151617// 声明函数function sayHi() &#123; console.log(\"吃了没？\");&#125;// 调用函数sayHi();// 求1-100之间所有数的和function getSum() &#123; var sum = 0; for (var i = 0; i &lt; 100; i++) &#123; sum += i; &#125; console.log(sum);&#125;// 调用getSum(); 函数的注意问题 函数需要先定义，然后才能调用 函数名字：要遵循驼峰命名法 函数一旦重名，后面的会把前面的 函数覆盖 函数的参数 在函数定义的时候，函数名字后面的小括号里的变量就是参数，目的是函数在调用的时候，接收用户传进来的值 此时函数定义的时候后面的小括号里的变量叫参数；写了两个变量，就有两个参数 语法： 12345678// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部// 带参数的函数声明function 函数名(形参1, 形参2, 形参...)&#123; // 函数体&#125;// 带参数的函数调用函数名(实参1, 实参2, 实参3); 形参和实参 形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。 实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。 123456var x = 5, y = 6;fn(x,y); function fn(a, b) &#123; console.log(a + b);&#125;//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y 函数的返回值当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值 返回值语法： 12345678//声明一个带返回值的函数function 函数名(形参1, 形参2, 形参...)&#123; //函数体 return 返回值;&#125;//可以通过变量来接收这个返回值var 变量 = 函数名(实参1, 实参2, 实参3); 函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。 返回值详解： 如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined 如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值 如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined 函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。 1推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。 函数的参数和返回值的注意问题 有参数,有返回值的函数 123function f1(x,y) &#123;return x+y;&#125; 有参数,无返回值的函数 123function f2(x) &#123;console.log(x);&#125; 无参数,有返回值的函数 123function f3() &#123;return 100;&#125; 无参数无返回值的函数 123function f4() &#123;console.log(\"萨瓦迪卡\");&#125; 函数的案例 求两个数字的和:获取任意的两个数字的和 1234function getSum(x, y) &#123; return x + y;&#125;console.log(getSum(10, 20)); 求1-n之间所有数的和 12345678function geteverySum(n) &#123; var sum = 0; for (var i = 1; i &lt;= n; i++) &#123; sum += i; &#125; return sum;&#125;console.log(geteverySum(10)); 求n-m之间所有数的和 12345678function geteverySum2(n, m) &#123; var sum = 0; for (var i = n; i &lt;= m; i++) &#123; sum += i; &#125; return sum;&#125;console.log(geteverySum2(1, 100)); 判断一个数是否是素数(质数),只能被1和自身整除，质数是从2开始 1234567891011// 用这个数字和这个数字前面的所有的数字整除一次(没有1的,没有自身的)function isPrimeNumber(num) &#123; for(var i=2;i&lt;num;i++)&#123; if(num%i==0)&#123; //说明有一个数字整除了,就没有必要向后继续整除了,此时就已经验证出不是质数 return false; &#125; &#125; return true;&#125;console.log(isPrimeNumber(8)?\"是质数\":\"不是质数\"); 通过函数实现冒泡排序 123456789101112131415function sortArray(arr) &#123; // 控制比较的轮数 for (var i = 0; i &lt; arr.length - 1; i++) &#123; // 控制每一轮的比较次数 for (var j = 0; j &lt; arr.length - 1 - i; j++) &#123; if (arr[j] &gt; arr[j + 1]) &#123; var temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; &#125;//end if &#125;//end for &#125;//end for return arr;&#125;console.log(sortArray([0, 19, 34, 10, 100, 2])); 输入,年月日,获取这个日期是这一年的第多少天 123456789101112131415161718192021222324252627// 判断这个年份是不是闰年function isLeapYear(year) &#123; return year%4==0&amp;&amp;year%100!=0||year%400==0;&#125;function getDays(year, month, day) &#123; // 定义变量存储对应的天数 var days = day; // 如果用户输入的是一月份,没必要向后算天数,直接返回天数 if (month == 1) &#123; return days; &#125; // 代码执行到这里-----说明用户输入的不是1月份 // 定义一个数组,存储每个月份的天数 var months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 小于的是输入的月份-1 for (var i = 0; i &lt; month - 1; i++) &#123; days += months[i]; &#125; // 需要判断这个年份是不是闰年 if(isLeapYear(year)&amp;&amp;month&gt;2)&#123; days++; &#125; return days;&#125;console.log(getDays(2000,3,2)); 函数的其他定义方式命名函数：函数如果有名字，就是命名函数 匿名函数：函数如果没有名字，就是匿名函数 函数表达式函数表达式：把一个函数给一个变量，此时形成了函数表达式 语法： 1var 变量 = 匿名函数; 例子： 1234var f1 = function ()&#123; &#125;;f1(); 如果是函数表达式，那么此时前面的变量存储的就是一个函数，而这个变量就相当于是一个函数，就可以直接加小括号调用了 注意：函数表达式后面，赋值结束后，要加分号 函数自调用声明的同时，直接调用，一次性的 123(function()&#123; console.log(\"直接调用\");&#125;)(); 函数也是一种数据类型函数的数据类型是：function 1234function f1()&#123; console.log(\"我是函数\");&#125;console.log(typeof f1) 函数作为参数使用如果一个函数作为参数使用，那么我们说这个参数（函数）为回调函数 只要看到一个函数作为参数使用了，那就是回调函数 12345678910// 函数声明，fn是变量，fn是参数function f1(fn)&#123; // 函数调用===说明fn这个变量中存储的是一个函数 fn();&#125;function f2()&#123; console.log(\"哦，这也可以\");&#125;// 调用f1函数，把f2的代码作为实参传给f1f1(f2); 函数作为返回值使用12345678function f1()&#123; console.log(\"f1函数调用了\"); return function ()&#123; consol.log(\"返回的函数也调用了\"); &#125;;&#125;var fn = f1();// 调用f1函数并把返回值给fnfn();","categories":[{"name":"JavaScript基础","slug":"JavaScript基础","permalink":"https://www.chyds.cn/categories/JavaScript基础/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.chyds.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.chyds.cn/tags/JavaScript/"},{"name":"学习","slug":"学习","permalink":"https://www.chyds.cn/tags/学习/"}]},{"title":"第二节：流程控制，分支结构，循环结构","slug":"第二节：流程控制，分支结构，循环结构","date":"2019-01-28T02:03:56.000Z","updated":"2019-01-28T03:43:58.457Z","comments":true,"path":"2019/01/28/第二节：流程控制，分支结构，循环结构/","link":"","permalink":"https://www.chyds.cn/2019/01/28/第二节：流程控制，分支结构，循环结构/","excerpt":"","text":"流程控制代码的执行过程 顺序结构：代码的执行顺序，从上到下，从左到右（不严谨） 分支结构：if语句，if-else语句，if-else if-else if…语句，switch-case语句，三元表达式语句 循环结构：while循环，do-while循环，for循环，后期还有一个for-in循环 分支结构if语句主要是判断 语法： 123if(表达式)&#123; 代码块&#125; 执行过程：先判断表达式的结果是true还是false，如果是true则执行代码块，如果是flase，大括号中的代码块是不执行的 例子：如果8大于6，请输出8 123if(8&gt;6)&#123; console.log(8);&#125; if-else语句两个分支，只能执行一个分支 语法： 12345if(表达式)&#123; 代码1&#125;esle&#123; 代码2&#125; 执行过程：如果表达式的结果是true则执行代码1，如果表达式的结果是false，则执行代码2 例子：小苏的年龄是否是成年人，如果是成年人则提示，可以看电影，否则回家写作业 12345678// 提示用户输入年龄var age = prompt(\"请您输入您的年龄\");// 判断if(age &gt;= 18)&#123; console.log(\"可以看电影了\");&#125;else&#123; console.log(\"回家写作业去\");&#125; 三元表达式运算符： ? : 语法： 1var 变量 = 表达式1? 表达式2: 表达式3; 执行过程： 表达式1的结果是true还是false，如果是ture则执行表达式2，然后把结果给变量 如果表达式1的结果是false，则执行表达式3，把结果给变量 例子：两个数字中的最大值 1234var x = 10;var y = 20;var result = x &gt; y ? x : y;console.log(result); 总结：大多数情况，使用if-else的语句都可以用三元表达式的方式来表示 if-else if语句if-else if-else if-else if……else======多个分支，最终也是执行一个 语法： 123456789if(表达式1)&#123; 代码1&#125;else if(表达式2)&#123; 代码2&#125;else if(表达式3)&#123; 代码3&#125;else &#123; 代码4&#125; else if======这种结构可以多多个，具体多少个看需求 else======结构是可以不用写的，具体也是看需求 执行过程： 先判断表达式1的结果， 如果为true则执行代码1 如果为false，则判断表达式2 如果表达式2为true则执行代码2 如果为flase则判断表达式3 如果表达式3为true则执行代码3 如果为false则执行代码4 例子： 成绩的结果在90到100之间则显示A级 如果成绩在80到90之间，则显示B级 如果成绩在70到80之间，则显示C级 如果成绩在60到70之间，则显示D级 如果成绩在0到60之间，则显示E级 123456789101112131415161718// 提示用户输入成绩var score = Number(prompt(\"请输入您的成绩\"));// 如果为true就说明 不是数字if(!isNaN(score))&#123; if(score &gt; 90 &amp;&amp; score &lt;= 100)&#123; console.log(\"A级\"); &#125;else if(score &gt; 80)&#123; console.log(\"B级\"); &#125;else if(score &gt; 70)&#123; console.log(\"C级\"); &#125;else if(score &gt;=60)&#123; console.log(\"D级\"); &#125;else &#123; console.log(\"E级\"); &#125;&#125;else &#123; console.log(\"您输入有误\");&#125; switch-case语句语法： 1234567891011121314151617switch(表达式)&#123; case 值1: 代码1; break; case 值2: 代码2; break; case 值3: 代码3; break; case 值4: 代码4; break; ...多个case default: 代码5;&#125; 执行过程： 获取表达式的值,和值1比较,如果一样,则执行代码1,遇到break则跳出整个的语句,后面代码不执行 如果表达式的值和值1不一样,则和值2比较,如果相同则执行代码2,遇到break则跳出 否则和值3比较,相同则执行代码3,遇到break,跳出 否则和值4比较,相同则执行代码4,遇到break则跳出 否则直接执行代码5 注意问题： default后面的break是可以省略的 default也可以省略 switch-case 语句中和case后面的值比较的时候使用的是严格的模式 例子：获取一个人的成绩的级别,如果是A级则显示90到100直接的分数 如果是B级则显示80到90分 如果是C级则显示70到80之间分数 如果是D级则显示60到70分之间 否则显示0到59之间 1234567891011121314151617var jiBie = \"E\";switch (jiBie) &#123; case \"A\": console.log(\"90到100之间\"); break; case \"B\": console.log(\"80到90之间\"); break; case \"C\": console.log(\"70到80之间\"); break; case \"D\": console.log(\"60到70之间\"); break; default : console.log(\"0到59之间\");&#125; 练习：根据月份显示对应的天数 1,3,5,7,8,10,12 —31天 2—-28天 4,6,9,11—-30天 123456789101112131415161718192021var month = parseInt(prompt(\"请输入月份\"));switch (month)&#123; case 1: case 3: case 5: case 7: case 8: case 10: case 12: console.log(\"31天\"); break; case 4: case 6: case 9: case 11: console.log(\"30天\"); break; case 2: console.log(\"28天\"); break;&#125; 总结分支语句 if-else语句:两个分支,最终只执行一个分支 if-else语句:两个分支,最终只执行一个分支 if-else if-else if…语句: 多个分支,也是只会执行一个 switch-case语句:多分支语句,最终也会一个(必须要有break) 三元表达式:和if-else语句是一样的 什么时候使用if-else if…: 一般是对范围的判断 什么时候使用switch-case语句:一般是对具体的值的判断 如果有多个分支,是针对范围的判断一般选择if-else if的语句 如果有多个分支,是针对具体的值判断,一般选择用switch-case语句 循环结构循环:一件事不停的或者是重复的做 循环要有结束的条件,循环还应该有计数器(记录循环的次数的) while循环语法： 123456// 计数器var 变量=0;while(循环的条件)&#123; 循环体; 计数器++;&#125; 执行过程: 先判断条件是否成立,(条件的结果是true还是false),如果是false,那么循环的代码(while的大括号中的代码都不执行),如果是true,那么先执行循环体,然后执行计数器,然后,直接去—&gt;循环的条件,再次判断是否成立,成立则继续执行循环体,否则跳出循环,执行完循环体之后,计数器加1,然后再去循环的条件,判断,成立则循环,否则跳出循环 例子：计算1-100之间所有数字的和 12345678910// 存储最终的和var sum=0;// 计数器var i=1;while(i&lt;=100)&#123; // 不停的计算数字的和 sum+=i; i++;&#125;console.log(\"和为:\"+sum); do-while循环语法： 123do&#123; 循环体;&#125;while(条件); 执行过程： 先执行一次循环体,然后判断条件是否成立,不成立,则跳出循环,成立则执行循环体,然后再判断条件是否成立,成立则继续循环,否则跳出….. 例子：问用户:您觉得我帅吗?提示用户请输入y/n ,如果n就一直问,我帅不帅,如果用户输入的y,则结束,并提示用户,您真有眼光 12345do &#123; //把用户输入的结果存储到result变量中 var result = prompt(\"您觉得我帅吗?y/n\");&#125; while (result != \"y\");console.log(\"您真有眼光\"); 总结while循环和do-while循环while循环特点：先判断,后循环，有可能一次循环体都不执行 do-while循环特点：先循环，后判断,至少执行一次循环体 for循环语法： 123for(表达式1;表达式1;表达式3;)&#123; 循环体;&#125; 执行过程: 先执行一次表达式1,然后判断表达式2;如果不成立则直接跳出循环 如果表达式2成立,执行循环体的代码,结束后,跳到表达式3执行,然后跳到表达式2,判断表达式2是否成立,不成立,则跳出循环 如果表达式2成立,则执行循环体,然后再跳到表达式3,再跳到表达式2,判断是否成立,一直如此 例子：求1-100之间所有数字的和 12345var sum = 0;for (var i = 1; i &lt;= 100; i++) &#123; sum += i;&#125;console.log(\"和为:\" + sum); 断点调试调试代码======高级程序员都是从调试开始的 调试：写代码======打开浏览器======F12(开发人员工具)======Sources======双击文件，在某一行代码前面点击一下(出现的东西就是断点) 12345var sum=0;for(var i=0;i&lt;5;i++)&#123; sum+=i;// 观察一下这个变量的值是多少,或者这行代码执行后的效果如何&#125;console.log(sum);","categories":[{"name":"JavaScript基础","slug":"JavaScript基础","permalink":"https://www.chyds.cn/categories/JavaScript基础/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.chyds.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.chyds.cn/tags/JavaScript/"},{"name":"学习","slug":"学习","permalink":"https://www.chyds.cn/tags/学习/"}]},{"title":"第一节：JS的介绍，变量，数据类型，运算符","slug":"第一节：js的介绍，变量，数据类型，运算符","date":"2019-01-27T12:50:16.000Z","updated":"2019-01-28T13:09:05.422Z","comments":true,"path":"2019/01/27/第一节：js的介绍，变量，数据类型，运算符/","link":"","permalink":"https://www.chyds.cn/2019/01/27/第一节：js的介绍，变量，数据类型，运算符/","excerpt":"","text":"JavaScript的介绍JavaScript是什么？ 是一门脚本语言：不需要编译，直接运行 是一门解释性的语言：遇到一行代码就执行一行代码 是一门动态类型的语言： 代码(变量)只有执行到这个位置的时候,才知道这个变量中到底存储的是什么,如果是对象,就有对象的属性和方法,如果是变量就是变量的作用 对象没有什么,只要点了,通过点语法,那么就可以为对象添加属性或者方法 是一门基于对象的语言 是一门弱类型的语言：声明变量的时候使用var JS分为三个部分 ECMAScript标准：js的基本语法 DOM BOM JS用了将近10天来发明的变量变量的作用操作数据，读取数据 变量的声明var 变量名字; var num; 变量的初始化var 变量名字=值;—字面量的方式赋值 var str=”这是一个字符串”; 注意事项 js中大小写是区分的 js中的字符串可以使用单引号，也可以使用双引号 js中每行代码结束都要有分号 ; 数据类型js中的原始数据类型 number 数字类型 string 字符串类型 boolean 布尔类型 undefined 未定义 null 空 object 对象 null和undefined数据是没有太大意义的，null是很有意义的—对象的时候解释 NaN——不是一个数字，不是一个数字和一个数字计算——结果就是NaN isNaN()——判断这个变量或者这个值是不是“不是一个数字”——如果不是一个数字结果就是true，如果是一个数字结果就是false number数据类型无论是整数还是小数都是number数据类型的 string数据类型字符串 获取字符串的长度 变量名.length null数据类型只有一个值，null undefined数据类型只有一个，undefined，一个变量声明了，没有赋值 object数据类型对象 类型转换其他类型转数字转整数 parseInt() 转小数 parseFloat() 转数字类型——比上面两个严格 Number() 其他类型转字符串 .toString() String() 其他类型转布尔类型要么是true要么是false Boolean() 运算符——操作符算术运算符 + - * / % 复合运算符 += -= *= /= %= 赋值运算符 = 优先级是最低的 一元运算符 ++ -- 如果++在后面：如num++ +10参与运算 先参与运算，运算结束后自身加1 如果++在前面：如++num+10参与运算 先自身加1，然后再参与运算 三元运算符 ? : 关系运算符关系运算符的结果是布尔类型 > \\&lt; >= \\&lt;= == === != !== 逻辑运算符逻辑运算符的结果是布尔类型 &amp;&amp; || ! 如果有一个为false，整个结果就是false 表达式1&amp;&amp;表达式2 只有一个为ture，整个结果就是true 表达式1||表达式2 结果就是取反 !表达式","categories":[{"name":"JavaScript基础","slug":"JavaScript基础","permalink":"https://www.chyds.cn/categories/JavaScript基础/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://www.chyds.cn/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.chyds.cn/tags/JavaScript/"},{"name":"学习","slug":"学习","permalink":"https://www.chyds.cn/tags/学习/"}]},{"title":"使用Hexo+Github搭建博客","slug":"Hexo-Github-Start-a-Blog","date":"2018-09-16T00:28:55.000Z","updated":"2019-01-28T14:47:22.985Z","comments":true,"path":"2018/09/16/Hexo-Github-Start-a-Blog/","link":"","permalink":"https://www.chyds.cn/2018/09/16/Hexo-Github-Start-a-Blog/","excerpt":"","text":"前言大概分为以下几个步骤 安装node.js 安装Git 安装Hexo 本地运行Hexo 托管到Github 安装node.jsHexo是基于nodeJS环境的静态博客 飞机直达 根据自己的Windows版本选择相应的安装版本 node.js 保持默认，一路Next，直到安装完成 检查node环境是否正常快捷键Win+R，打开运行窗口 运行窗口 在运行窗口中输入cmd，回车，打开命令行界面在命令行中输入 node -vnpm -v 命令行 如图所示显示版本号，则安装正常 安装Git环境下载安装Git 飞机直达 下载完成后打开安装包 Git 大部分安装默认设置，只有下图需要选择第二项 Git 检查Git环境是否正常安装完成后打开命令行，输入： git –version 命令行 如图所示显示版本号，则安装正常 安装Hexo使用npm安装Hexo打开命令行 npm install -g hexo-cli 等待安装完成 命令行 检查安装状态 hexo -v 如果你看到了如图文字，则说明已经安装成功了。 体验hexo初始化hexo新建一个文件夹，用来存放博客的文件 打开命令行cd到新建的目录 输入初始化命令 hexo init 完成之后可以看到文件夹下多了这些文件 node_modules：是依赖包 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 本地运行hexo打开命令行cd到博客的目录 输入命令生成页面 hexo g //generetor的缩写 输入命令启动本地服务 hexo s //server的缩写 启动成功，浏览器输入地址访问 http://localhost:4000/ 如果看到这个样子，恭喜你已经成功在本地运行博客了 托管到GitHub注册GitHub如果已经有账号了可以跳过此步 打开GitHub 飞机直达 填写用户名，邮箱，密码 Github会发送一封注册确认的邮件，收到邮件后确认注册 创建仓库登录GitHub点击头像旁边的+号图标 选择第一项 new erpository 仓库名称填写格式，因为我创建过了所以提示已存在 用户名.github.io 填写完后点击Create repository 创建仓库 创建完成后点击Settings 设置 页面向下拉，直到看见GitHub Pages 点击 launch automatic page generator 之后会跳转一个页面 点击 continue to layouts 跳转后点击Publish page 发布页面 发布完成后就可以在浏览器输入 用户名.github.io 访问了 配置git个人信息如果你已经配置过个人信息请跳过这个步骤 设置git的user name和email 在博客文件夹目录右键–Git Base Here git config –global user.name “用户名”git config –global user.email “邮箱” 生成密钥 输入命令，连续三个回车，会生成两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator\\.ssh） ssh-keygen -t rsa -C “邮箱” 打开GitHub进入设置 点击SSH and GPG keys进入SSH配置页，再点击New SSH key添加新的密钥 Title填写一个名称（一般用来区分不同的主机），用文本工具打开id_rsa.pub复制到key里 点击Add SSH key输入密码保存 托管代码把代码托管到GitHub之前先配置hexo的上传信息 打开博客文件夹找到_config.yml文件并打开找到Deployment，然后按照如下修改： deploy: type: git repository: github: git@github.com:用户名/用户名.github.io.git branch: master 在博客目录右键—&gt;Git Bash Here 输入命令生成静态页面 hexo d 输入命令上传代码 hexo d 再次访问你的网站，这个地址就是你博客的地址，我们的博客已经搭建完成了！ 用户名.github.io 常用指令 hexo clean //清除缓存文件 db.json 和已生成的静态文件 public hexo g //生成网站静态文件到默认设置的 public 文件夹 hexo s //启动本地服务器，默认地址： http://localhost:4000 hexo d //部署到设定的仓库 每次更新博客先生成静态页面再上传","categories":[{"name":"教程","slug":"教程","permalink":"https://www.chyds.cn/categories/教程/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://www.chyds.cn/tags/教程/"},{"name":"Hexo","slug":"Hexo","permalink":"https://www.chyds.cn/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://www.chyds.cn/tags/Github/"},{"name":"博客","slug":"博客","permalink":"https://www.chyds.cn/tags/博客/"}]},{"title":"Sublime Text3 安装以及汉化等常用插件","slug":"sublime-text3-install","date":"2018-04-10T15:43:42.000Z","updated":"2019-01-28T03:23:38.618Z","comments":true,"path":"2018/04/10/sublime-text3-install/","link":"","permalink":"https://www.chyds.cn/2018/04/10/sublime-text3-install/","excerpt":"","text":"下载Sublime Text3到官网下载Sublime Text3 安装包 链接附上：https://www.sublimetext.com/3 按照你的系统下载向对应的安装包 安装Sublime Text3打开下载好的安装包 可以按照默认一路安装下去，也可以修改安装位置，自己决定 安装Package Control插件管理器以及汉化插件Sublime刚安装好后是英文的，要安装一个插件管理器和汉化插件 安装Package Control插件管理器 Package Control是Sulime的插件管理器，可以添加、删除、查询插件等 1、打开 https://packagecontrol.io/installation 2、复制Sublime Text3的代码 3、打开Sublime快捷键CTRL+`，打开控制台 4、把刚刚复制的代码粘贴到控制台然后回车安装 安装汉化插件1、打开Sublime 选择Preferences &gt; Package Control 或者使用快捷键 Ctrl+Shift+p 2、输入install 选择 Package Control: install Package 回车确认选择 3、输入ChineseLocalizations 汉化插件名称，回车确认安装 常用插件推荐 插件的安装方法参照上面的安装汉化插件 A File Icon功能：侧边栏文件图标 All Autocomplete功能：搜索所有打开的文件来寻找匹配的提示词 AutoFileName功能：文件路径补全 Boxy Theme功能：主题 使用：首选项 &gt; 主题 ColorHighlighter功能：颜色代码选中高亮 DocBlockr功能：注释 Emmet功能：代码快捷键 使用方法：https://docs.emmet.io/cheat-sheet/ LESS功能：代码高亮 Less2css功能：Less编译 less2css依赖lessc这个工具 飞机直达 把目录地址加入到环境变量PATH的中，如D:\\less.js-windows-master SideBarEnhancements功能：增强侧边栏 Sublimerge功能：文件对比 TortoiseSVN功能：在sublime中进行svn相关操作 Setting-User配置 12345678&#123; // Auto close update dialog when no errors, conflicts and merges \"autoCloseUpdateDialog\": false, // Auto close commit dialog when no errors, conflicts and merges \"autoCloseCommitDialog\": true, \"tortoiseproc_path\": \"D:\\Tool\\TortoiseSVN\\bin\\TortoiseProc.exe\" &#125; D:\\Tool\\TortoiseSVN\\bin\\TortoiseProc.exe 表示的是SVN客户端的安装路径，此路径请自行修改 View in Browser功能：在浏览器中打开 cssrem功能：px转rem Setting-User配置 12345&#123; \"px_to_rem\":20, // px转rem的单位比例 \"max_rem_fraction_length\":6, // px转rem的小数部分的最大长度 \"available_file_types\":[\".html\",\".css\",\".less\",\".sass\"], // 启用此插件的文件类型&#125; HTML-CSS-JS Prettify功能：格式化代码 依赖node.js Plugin Options - Default配置 123456\"node_path\": &#123; \"windows\": \"C:/Program Files/nodejs/node.exe\", // node.js的安装目录 \"linux\": \"/usr/bin/nodejs\", \"osx\": \"/usr/local/bin/node\" &#125;, liveReload功能：浏览器自动刷新 需要在浏览器安装相应的插件 SublimeCodeIntel功能：多语言代码智能提示 ColorPicker功能：调色板 使用：快捷键 Ctrl+Shift+C","categories":[{"name":"教程","slug":"教程","permalink":"https://www.chyds.cn/categories/教程/"}],"tags":[{"name":"Sublime Text3","slug":"Sublime-Text3","permalink":"https://www.chyds.cn/tags/Sublime-Text3/"},{"name":"教程","slug":"教程","permalink":"https://www.chyds.cn/tags/教程/"},{"name":"前端","slug":"前端","permalink":"https://www.chyds.cn/tags/前端/"}]}]}