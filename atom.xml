<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chanhy&#39;s Blog</title>
  
  <subtitle>记录生活，记录学习，分享知识</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chyds.cn/"/>
  <updated>2019-01-29T15:02:24.406Z</updated>
  <id>https://www.chyds.cn/</id>
  
  <author>
    <name>Chanhy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第六节：Math，Date，String，Array内置对象，基本包装类型</title>
    <link href="https://www.chyds.cn/2019/01/29/%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%9AMath%EF%BC%8CDate%EF%BC%8CString%EF%BC%8CArray%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
    <id>https://www.chyds.cn/2019/01/29/第六节：Math，Date，String，Array内置对象，基本包装类型/</id>
    <published>2019-01-29T08:33:35.000Z</published>
    <updated>2019-01-29T15:02:24.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js学习中三种对象"><a href="#js学习中三种对象" class="headerlink" title="js学习中三种对象"></a>js学习中三种对象</h1><ol><li>内置对象——js系统自带的对象</li><li>自定义对象——自己定义的构造函数创建的对象</li><li>浏览器对象——DOM的时候讲</li></ol><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><ul><li>MDN——在线学习文档</li><li>实例对象：通过构造函数创建出来，实例化对象</li><li>实例方法：必须通过实例对象调用</li><li>静态对象：不需要创建，直接就是一个对象，方法（静态方法）直接通过这个对象名字调用</li><li>静态方法：必须通过大写的对象调用</li></ul><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><h3 id="Math对象常用方法"><a href="#Math对象常用方法" class="headerlink" title="Math对象常用方法"></a>Math对象常用方法</h3><ul><li>Math.PI——π</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI); <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><ul><li>Math.E——常数的底数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.E); <span class="comment">//2.718281828459045</span></span><br></pre></td></tr></table></figure><ul><li>Math.abs(值)——绝对值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-100</span>)); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>Math.ceil(值)——向上取整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">1.0394</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>Math.floor(值)——向下取整</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">0.9938</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>Math.max——求一组数字的最大值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">10</span>,<span class="number">20</span>,<span class="number">304</span>,<span class="number">50</span>)); <span class="comment">// 304</span></span><br></pre></td></tr></table></figure><ul><li>Math.min——求一组数字的最小值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">10</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">45</span>,<span class="number">78</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>Math.random——0-1之间的伪随机数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random()); <span class="comment">// 0-1伪随机数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">5</span>)); <span class="comment">// 0-4 伪随机数，没有5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">5</span>)+<span class="number">1</span>); <span class="comment">// 1-5伪随机数</span></span><br></pre></td></tr></table></figure><ul><li>Math.pow(值,值)——次幂</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">7</span>,<span class="number">2</span>)); <span class="comment">// 49 (7的2次幂)</span></span><br></pre></td></tr></table></figure><ul><li>Math.sqrt(值)——平方根</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.sqrt(<span class="number">16</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>例子：自己定义一个对象，实现系统的max的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyMath</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 添加一个方法</span></span><br><span class="line">    <span class="keyword">this</span>.getMax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 所有数字中的最大值</span></span><br><span class="line">        <span class="keyword">var</span> max = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; <span class="built_in">arguments</span>[i])&#123;</span><br><span class="line">                max = <span class="built_in">arguments</span>[i];</span><br><span class="line">            &#125; <span class="comment">// if end</span></span><br><span class="line">        &#125; <span class="comment">// for end</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> mt = <span class="keyword">new</span> MyMath();</span><br><span class="line"><span class="built_in">console</span>.log(mt.getMax(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>));</span><br></pre></td></tr></table></figure><p>例子：随机产生一个十六进制的颜色值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"#"</span>;</span><br><span class="line">    <span class="comment">// 十六进制值得数组</span></span><br><span class="line">    <span class="keyword">var</span> array = [<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 产生得每个随机数都是一个索引，根据索引找到数组中对应得值，拼接在一起</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">16</span>);</span><br><span class="line">        str += array[num];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getColor());</span><br></pre></td></tr></table></figure><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>Date对象使用需要实例化对象</p><h3 id="Date对象常用方法"><a href="#Date对象常用方法" class="headerlink" title="Date对象常用方法"></a>Date对象常用方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date); <span class="comment">// 输出的是当前时间 Tue Jan 29 2019 17:30:26 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p>如果实例化时传入了时间，输出的就是传入的时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2017-08-12"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dt); <span class="comment">//传入的时间 Sat Aug 12 2017 08:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><ul><li>Date.now()——获取自1970年1月1日 00:00:00 UTC到当前时间的毫秒数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dt=<span class="built_in">Date</span>.now();</span><br><span class="line"><span class="built_in">console</span>.log(dt);<span class="comment">//毫秒 1548754498399</span></span><br></pre></td></tr></table></figure><ul><li>.getFullYear()——获取年份</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear());</span><br></pre></td></tr></table></figure><ul><li>.getMonth()——获取月份，是0开始的 真实的月份是需要加1的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth()+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>.getDate()——获取日期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getDate());</span><br></pre></td></tr></table></figure><ul><li>.getHours()——获取小时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getHours());</span><br></pre></td></tr></table></figure><ul><li>.getMinutes()——获取分钟</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getMinutes());</span><br></pre></td></tr></table></figure><ul><li>.getSeconds()——获取秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getSeconds());</span><br></pre></td></tr></table></figure><ul><li>.getDay()——获取星期，星期从0开始的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getDay());</span><br></pre></td></tr></table></figure><ul><li><p>.toString()——转字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(date.toString());</span><br></pre></td></tr></table></figure></li><li><p>.toDateString()——英文的—日期</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(date.toDateString());</span><br></pre></td></tr></table></figure><ul><li>.toLocaleDateString)()——数字格式–日期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleDateString());</span><br></pre></td></tr></table></figure><ul><li>.toTimeString()——小时分钟秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(date.toTimeString());</span><br></pre></td></tr></table></figure><ul><li>.toLocaleTimeString()——小时分钟秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleTimeString());</span><br></pre></td></tr></table></figure><ul><li>.valueOf()——毫秒值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf());</span><br></pre></td></tr></table></figure><h3 id="案例：格式化日期"><a href="#案例：格式化日期" class="headerlink" title="案例：格式化日期"></a>案例：格式化日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入一个Date对象，返回一个格式化后的日期</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; date Date对象</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;      格式化后的日期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 获取年</span></span><br><span class="line"><span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line"><span class="comment">// 获取月</span></span><br><span class="line"><span class="keyword">var</span> month = date.getMonth()+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 获取日</span></span><br><span class="line"><span class="keyword">var</span> day = date.getDate();</span><br><span class="line"><span class="comment">// 获取小时</span></span><br><span class="line"><span class="keyword">var</span> hour = date.getHours();</span><br><span class="line"><span class="comment">// 获取分钟</span></span><br><span class="line"><span class="keyword">var</span> minute = date.getMinutes();</span><br><span class="line"><span class="comment">// 获取秒</span></span><br><span class="line"><span class="keyword">var</span> second = date.getSeconds();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理日期和时间少于10只有一位数的问题</span></span><br><span class="line">month = fixDate(month);</span><br><span class="line">day = fixDate(day);</span><br><span class="line">hour = fixDate(hour);</span><br><span class="line">minute = fixDate(minute);</span><br><span class="line">second = fixDate(second);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日 "</span> + hour + <span class="string">":"</span> + minute + <span class="string">":"</span> +second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入一个值，如果小于10就在前面添加个0</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125; value 数字</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;       字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixDate</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">value = value&lt;<span class="number">10</span>?<span class="string">"0"</span>+value:value;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 调用方法并传入时间对象</span></span><br><span class="line"><span class="built_in">console</span>.log(getDate(dt));</span><br></pre></td></tr></table></figure><h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><h3 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h3><p>string——字符串类型——基本类型</p><p>String——字符串类型——引用类型</p><ul><li>字符串是可以看成是多个字符组合成的数组</li><li>js中无论是单引号的还是双引号的都是字符串</li><li>因为字符串可以看成是数组，所以可以通过for循环进行遍历</li><li>字符串特性：不可变性，字符串的值是不能变得</li><li>字符串得的之所以看起来改变了，那是因为指向（引用）改变了</li></ul><h3 id="String对象常用方法"><a href="#String对象常用方法" class="headerlink" title="String对象常用方法"></a>String对象常用方法</h3><ul><li>.length——字符串的长度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"字符串"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><ul><li>.charAt(索引)——返回索引位置的字符串，超出索引返回空字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"字符串"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>)); <span class="comment">// 符</span></span><br></pre></td></tr></table></figure><ul><li>String.fromCharCode(ASCII值,ASCII值,…)——静态方法，返回相对应Unicode码的一个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> st r= <span class="built_in">String</span>.fromCharCode(<span class="number">83</span>,<span class="number">79</span>,<span class="number">83</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// SOS</span></span><br></pre></td></tr></table></figure><ul><li>.concat(字符串1,字符串2,…)——将一个或多个字符串与原字符串拼接，形成一个新的字符串并返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"字符串"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">"第二个字符串"</span>, <span class="string">"第三个字符串"</span>)); <span class="comment">// 字符串第二个字符串第三个字符串</span></span><br></pre></td></tr></table></figure><ul><li>.indexOf(要找的字符串,从某个位置开始的索引)——返回的是这个字符串的索引值,没找到则返回-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"字符串"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"符"</span>,<span class="number">0</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>.lastIndexOf(要找的字符串,从某个位置开始的索引)——从后向前找,但是索引仍然是从左向右的方式，找不到则返回-1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;字符串&quot;;</span><br><span class="line">console.log(str.lastIndexOf(&quot;符&quot;)); // 1</span><br></pre></td></tr></table></figure><ul><li>.replace(“原来的字符串”,”新的字符串”)——用来替换字符串的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"小苏好帅哦,真的好勇敢哦"</span>;</span><br><span class="line"><span class="keyword">if</span>(str.indexOf(<span class="string">"帅"</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">str = str.replace(<span class="string">"帅"</span>,<span class="string">"猥琐"</span>); <span class="comment">// 替换字符串</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"不存在"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 小苏好猥琐哦,真的好勇敢哦</span></span><br></pre></td></tr></table></figure><ul><li>.slice(开始的索引,结束的索引)——从索引5的位置开始提取，到索引为10的前一个结束，没有10，并返回这个提取后的字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"如果有一天我邪恶了,请记住,我曾纯洁过"</span>;</span><br><span class="line"><span class="comment">// 从索引5的位置开始提取,到索引为10的前一个结束,没有10，并返回这个提取后的字符串</span></span><br><span class="line">str = str.slice(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 我邪恶了,</span></span><br></pre></td></tr></table></figure><ul><li>.split(“要干掉的字符串”,切割后留下的个数)——切割字符串，返回一个数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"乔峰|慕容|凤姐|梅超风|小苏|大蛇丸"</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">"|"</span>); <span class="comment">// 切割掉|字符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>.substr(开始的位置,个数)——返回的是截取后的新的字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"哈哈,小苏真的是好帅哦"</span>;</span><br><span class="line">str = str.substr(<span class="number">5</span>,<span class="number">5</span>); <span class="comment">// 从索引5开始，截取5个</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">/// 真的是好帅</span></span><br></pre></td></tr></table></figure><ul><li>.substring(开始的索引,结束的索引)——返回截取后的字符串,不包含结束的索引的字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"哈哈,小苏真的是好帅哦"</span>;</span><br><span class="line">str = str.substring(<span class="number">5</span>,<span class="number">9</span>); <span class="comment">// 从索引5开始截取，到9前一个（8）结束</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// 真的是好</span></span><br></pre></td></tr></table></figure><ul><li>.toLocaleLowerCase()——转小写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"HELLO"</span>;</span><br><span class="line">str = str.toLocaleLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><ul><li>.toLowerCase()——转小写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"HELLO"</span>;</span><br><span class="line">str=str.toLowerCase();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><ul><li>.toLocaleUpperCase()——转大写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span>;</span><br><span class="line">str = str.toLocaleUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// HELLO</span></span><br></pre></td></tr></table></figure><ul><li>.toUpperCase()——转大写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span>;</span><br><span class="line">str = str.toUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// HELLO</span></span><br></pre></td></tr></table></figure><ul><li>.trim()——去除字符串两端的空格</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"   哦,这    是一个神奇的一天   "</span>;</span><br><span class="line">str=str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"===="</span>+str+<span class="string">"===="</span>); <span class="comment">// ====哦,这    是一个神奇的一天====</span></span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>案例1：找到这个字符串中所有的 o 出现的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">"hello wod odd ott fbo nhyo"</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">// 开始的位置</span></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">"o"</span>; <span class="comment">// 要找的字符串</span></span><br><span class="line"><span class="keyword">while</span> ((index = str2.indexOf(key, index)) != <span class="number">-1</span>) &#123;<span class="comment">//如果是-1情况,说明找完了</span></span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">  index += key.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：找到这个字符串中每个字符串出现了多少次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = <span class="string">"whatOareYyouYnoYshaHleiHoHmyHgod"</span>;</span><br><span class="line"><span class="comment">//第一步:把所有的字母全部变成小写</span></span><br><span class="line">str3 = str3.toLocaleLowerCase();</span><br><span class="line"><span class="comment">//第二步:创建一个空对象,目的:把字母作为键,次数作为值</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//第三步,遍历字符串,获取每个字母</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str3.length; i++) &#123;</span><br><span class="line">  <span class="comment">//判断obj这个对象中有没有这个字母(字母---键)</span></span><br><span class="line">  <span class="keyword">var</span> key = str3[i];<span class="comment">//每个字母</span></span><br><span class="line">  <span class="keyword">if</span> (obj[key]) &#123;<span class="comment">//判断obj中有没有这个键</span></span><br><span class="line">    <span class="comment">//对象中有这个字母了</span></span><br><span class="line">    obj[key]++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//对象中没有这个字母,那就把字母加到对象中,并且给这个字母一个出现的次数,默认1次</span></span><br><span class="line">    obj[key] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历对象,显示每个字母的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key+<span class="string">"这个字母出现了"</span>+obj[key]+<span class="string">"次"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><ul><li>构造函数创建Array对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><ul><li>字面量的方法创建Array对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br></pre></td></tr></table></figure><ul><li>判断变量是不是数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="built_in">console</span>.log(array <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Array对象常用方法"><a href="#Array对象常用方法" class="headerlink" title="Array对象常用方法"></a>Array对象常用方法</h3><ul><li>Array.isArray(对象)——判断这个对象是不是数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> array = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(array)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>.concat(数组,数组,数组,…) ——合并数组，返回一个新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=[<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2)); <span class="comment">// [10,20,30,40,50,60]</span></span><br></pre></td></tr></table></figure><ul><li>.every(回调函数)——返回值是布尔类型，函数作为参数使用，函数中有三个参数，第一个参数是元素的值，第二个参数是索引值，第三个参数是原来的数组(没用)</li><li>如果这个数组中的每个元素的值都符合条件,最后才返回的是true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">3000</span>];</span><br><span class="line"><span class="comment">// a----: 元素的值</span></span><br><span class="line"><span class="comment">// b----: 索引的值</span></span><br><span class="line"><span class="comment">// c----:谁调用了这个方法,那么c就是谁----&gt;arr</span></span><br><span class="line"><span class="keyword">var</span> flag= arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line"><span class="comment">// console.log(a+"==="+b+"===="+c);</span></span><br><span class="line"><span class="keyword">return</span> a &gt; <span class="number">2000</span>; <span class="comment">// 数组中的每个元素的值都要大于2000的情况,最后才返回true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br></pre></td></tr></table></figure><ul><li>.filter(回调函数)——返回的是数组中每一个元素都复合条件的元素，组成了一个新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele</span>) </span>&#123;<span class="comment">//ele---每个元素</span></span><br><span class="line"><span class="keyword">return</span> ele &gt; <span class="number">40</span>; <span class="comment">// 大于40的元素</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [50,60,70,80]</span></span><br></pre></td></tr></table></figure><ul><li>.push(值)——把值追加到数组中，加到最后，返回值是追加数据之后的数组长度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.push(<span class="number">4</span>,<span class="number">5</span>)); <span class="comment">// 长度为5</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><ul><li>.unshift()——向数组的第一个元素前面插入一个新的元素，返回值是插入后的数组长度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.unshift(<span class="number">0</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [0,1,2,3]</span></span><br></pre></td></tr></table></figure><ul><li>.pop()——删除数组中最后一个元素，返回值就是删除的这个值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.pop()); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><ul><li>.shift()——删除数组中第一个元素，返回值就是删除的这个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.shift()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [2,3]</span></span><br></pre></td></tr></table></figure><ul><li>.forEach(回调函数)——遍历数组用，相当于for循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123; <span class="comment">// ele每个元素，index索引值</span></span><br><span class="line"><span class="built_in">console</span>.log(ele+<span class="string">"==="</span>+index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>.indexOf(查找的元素值)——返回的值索引，没找到则是-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.indexOf(<span class="number">4</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>.join(“字符串”)——分割数组，返回的是一个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.join(<span class="string">"|"</span>)); <span class="comment">// 1|2|3|4|5|7</span></span><br></pre></td></tr></table></figure><ul><li>.map(函数)——数组中的每个元素都要执行这个函数，把执行过后的结果重新放在一个新的数组中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> roots = array.map(<span class="function"><span class="params">x</span>=&gt;</span>x+<span class="number">1</span>); <span class="comment">// 每个元素加1</span></span><br><span class="line"><span class="built_in">console</span>.log(roots); <span class="comment">// [2,5,10]</span></span><br></pre></td></tr></table></figure><ul><li>.reverse()——反转数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">array.reverse(); <span class="comment">//反转数组</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><ul><li>.sort()——排序，可能不稳定，如果不稳定请写MDN中的那个固定代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">40</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">100</span>];</span><br><span class="line">array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><ul><li>.slice(开始的索引,结束的索引)——把截取的数组的值放在一个新的数组中，但是不包含结束的索引对应的元素值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">2</span>,<span class="number">8</span>)); <span class="comment">// 索引2开始，7结束 [3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><ul><li>.splice(开始的位置,要删除的个数,替换的元素的值)——一般是用于删除数组中的元素，或者是替换元素，或者是插入元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line">array.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">'drum'</span>); <span class="comment">// 在索引为2的位置，不删除元素，插入'drum'</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// ["angel", "clown", "drum", "mandarin", "sturgeon"]</span></span><br><span class="line">array.splice(<span class="number">2</span>,<span class="number">1</span>); <span class="comment">// 在索引为2的位置删除一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// ["angel", "clown", "mandarin", "sturgeon"]</span></span><br></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>案例1：[“c”, “a”, “z”, “a”, “x”, “a”]找到数组中每一个a出现的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"z"</span>, <span class="string">"a"</span>, <span class="string">"x"</span>, <span class="string">"a"</span>];</span><br><span class="line"> <span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">// 从0开始查找</span></span><br><span class="line"> <span class="keyword">var</span> key = <span class="string">"a"</span>; <span class="comment">// 查找的元素</span></span><br><span class="line"> <span class="keyword">while</span>((index = array.indexOf(key, index))!=<span class="number">-1</span>)&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(index);</span><br><span class="line"> index+=key.length;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>案例2：编写一个方法去掉一个数组的重复元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"z"</span>, <span class="string">"a"</span>, <span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterArray</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 新建一个空数组存放过滤完成的数组</span></span><br><span class="line">    <span class="keyword">var</span> newArray = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(newArray.indexOf(array[i])==<span class="number">-1</span>)&#123;</span><br><span class="line">            newArray.push(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(filterArray(array24));</span><br></pre></td></tr></table></figure><h1 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h1><ul><li>普通变量不能直接调用属性或者方法</li><li>对象可以直接调用属性和方法</li><li>基本包装类型：本身是基本类型，但是在执行代码的过程中，如果这种类型的变量调用了属性或者是方法，那么这种类型就不再是基本类型了，而是基本包装类型，这个变量也不是普通的变量了，而是基本包装类型对象</li><li>基本包装类型有三个：<code>string</code> <code>number</code> <code>boolean</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span>; <span class="comment">// 基本类型</span></span><br><span class="line">str = str.replace(<span class="string">"ll"</span>,<span class="string">"HH"</span>); <span class="comment">// 调用了放法，基本包装类型</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>; <span class="comment">// 基本类型</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="built_in">Number</span>(<span class="string">"10"</span>); <span class="comment">// 基本类型,没有new---类型转换</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">"10"</span>); <span class="comment">//基本包装类型</span></span><br></pre></td></tr></table></figure><ul><li>如果是一个对象&amp;&amp;true,那么结果是true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>); <span class="comment">// 对象，基本包装类型</span></span><br><span class="line"><span class="keyword">var</span> result = flag&amp;&amp;<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>如果是一个true&amp;&amp;对象,那么结果是对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>); <span class="comment">// 对象，基本包装类型</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">true</span>&amp;&amp;flag;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 对象</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js学习中三种对象&quot;&gt;&lt;a href=&quot;#js学习中三种对象&quot; class=&quot;headerlink&quot; title=&quot;js学习中三种对象&quot;&gt;&lt;/a&gt;js学习中三种对象&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;内置对象——js系统自带的对象&lt;/li&gt;
&lt;li&gt;自定义对象——自己定义
      
    
    </summary>
    
    
      <category term="前端" scheme="https://www.chyds.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://www.chyds.cn/tags/JavaScript/"/>
    
      <category term="学习" scheme="https://www.chyds.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第五节：编程思想，对象，JSON，简单类型和复杂类型</title>
    <link href="https://www.chyds.cn/2019/01/28/%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%9A%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%8C%E5%AF%B9%E8%B1%A1%EF%BC%8CJSON%EF%BC%8C%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B/"/>
    <id>https://www.chyds.cn/2019/01/28/第五节：编程思想，对象，JSON，简单类型和复杂类型/</id>
    <published>2019-01-28T11:30:21.000Z</published>
    <updated>2019-01-29T08:48:08.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h1><p>把一些生活中做事的经验融入到程序中</p><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>凡事亲力亲为，所有的事情过程都要清楚，注重的是过程</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>提出需求，找到对象，对象解决这个问题，我们要结果，注重的是结果</li><li>面向对象的特性：封装，继承，多态，（抽象性）</li><li>js不是面向对象的语言，但是可以模拟面向对象的思想</li><li>js是一门基于对象的语言</li><li>万物皆对象</li></ul><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>对象：有属性和方法，特指的某个事物</p><p>对象：一组无序属性的集合，属性的值可以是任意的类型</p><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。</span><br><span class="line">举例： 一部车，一个手机</span><br><span class="line">车是一类事物，门口停的那辆车才是对象</span><br><span class="line">特征：红色、四个轮子</span><br><span class="line">行为：驾驶、刹车</span><br></pre></td></tr></table></figure><h2 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaScript中的对象其实就是生活中对象的一个抽象</span><br><span class="line">JavaScript的对象是无序属性的集合。</span><br><span class="line">其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。</span><br><span class="line">对象的行为和特征</span><br><span class="line">特征---属性</span><br><span class="line">行为---方法</span><br></pre></td></tr></table></figure><ul><li>事物的特征在对象中用属性来表示。</li><li>事物的行为在对象中用方法来表示。</li></ul><h2 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h2><h3 id="调用系统的构造函数"><a href="#调用系统的构造函数" class="headerlink" title="调用系统的构造函数"></a>调用系统的构造函数</h3><p>调用系统的构造函数创建对象</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 变量名 = new Object(); // Object 是系统的构造函数</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">// 对象有特征---属性和行为---方法</span></span><br><span class="line"><span class="comment">// 添加属性---如果添加属性？ 对象.名字 = 值;</span></span><br><span class="line">obj.name = <span class="string">"小苏"</span>;</span><br><span class="line">obj.age = <span class="number">38</span>;</span><br><span class="line">obj.sex = <span class="string">"女"</span>;</span><br><span class="line"><span class="comment">// 添加方法---如果添加方法？ 对象.名字 = 函数;</span></span><br><span class="line">obj.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"这是一个方法"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 获取属性</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.age); <span class="comment">// 获取属性</span></span><br><span class="line">obj.eat(); <span class="comment">// 调用方法</span></span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式创建对象：一次性创建多个对象，把创建对象的代码封装在一个函数中</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">// 创建对象</span></span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    <span class="comment">// 添加方法</span></span><br><span class="line">    obj.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"阿涅哈斯诶呦,我叫:"</span> + <span class="keyword">this</span>.name + <span class="string">"我今年:"</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> per1 = createObject(<span class="string">"小芳"</span>,<span class="number">20</span>);</span><br><span class="line">per1.sayHi();</span><br><span class="line"><span class="comment">//调 用函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> per2 = createObject(<span class="string">"小红"</span>,<span class="number">30</span>);</span><br><span class="line">per2.sayHi();</span><br></pre></td></tr></table></figure><h3 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h3><ul><li><p>自定义构造函数创建对象：我要自己定义一个构造函数，自定义构造函数，创建对象</p></li><li><p>函数和构造函数的区别：名字是不是大写（首字母）</p></li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我叫:"</span>+<span class="keyword">this</span>.name+<span class="string">",年龄是:"</span>+<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义构造函数创建对象:先自定义一个构造函数,创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Person(<span class="string">"小明"</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br><span class="line">obj.sayHi();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2=<span class="keyword">new</span> Person(<span class="string">"小红"</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj2.age);</span><br><span class="line">obj2.sayHi();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2 <span class="keyword">instanceof</span>  Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>自定义构造函数创建对象做了四件事</p><ol><li>在内存中开辟（申请一块空闲的）空间，存储创建的新的对象</li><li>把this设置为当前的对象</li><li>设置对象的属性和方法值</li><li>把this这个对象返回</li></ol><h3 id="字面量的方式"><a href="#字面量的方式" class="headerlink" title="字面量的方式"></a>字面量的方式</h3><p>字面量的方式创建对象</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;; <span class="comment">// 空对象</span></span><br><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line">obj.name=<span class="string">"小白"</span>;</span><br><span class="line">obj.age=<span class="number">10</span>;</span><br><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line">obj.sayHi=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是:"</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">obj.sayHi();</span><br></pre></td></tr></table></figure><p>优化后的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐使用这种写法</span></span><br><span class="line"><span class="keyword">var</span> obj2=&#123;</span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    name:<span class="string">"小明"</span>,</span><br><span class="line">    age:<span class="number">20</span>,</span><br><span class="line">    <span class="comment">// 添加方法</span></span><br><span class="line">    sayHi:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是:"</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"吃了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">obj2.sayHi();</span><br><span class="line">obj2.eat();</span><br></pre></td></tr></table></figure><h2 id="总结对象"><a href="#总结对象" class="headerlink" title="总结对象"></a>总结对象</h2><ul><li>字面量方式创建对象的缺陷：一次性的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">"小明"</span>,</span><br><span class="line">    age:<span class="number">38</span>,</span><br><span class="line">    sex:<span class="string">"女"</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.name=<span class="string">"小三"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br></pre></td></tr></table></figure><ul><li>点语法：对象.名字=值; 对象.名字=函数;——没有什么点就有了</li><li>instanceof关键字使用：</li></ul><p>如何获取该变量（对象）是不是属于什么类型的？</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 instanceof 类型的名字 // 布尔类型</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> Oject);</span><br></pre></td></tr></table></figure><ul><li>创建对象的内存图</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-28_20-51-16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="设置和获取属性的另一种写法"><a href="#设置和获取属性的另一种写法" class="headerlink" title="设置和获取属性的另一种写法"></a>设置和获取属性的另一种写法</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名[&quot;属性名&quot;] = 值或者方法;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.play=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"喜欢玩游戏"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> Person(<span class="string">"卡卡西"</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">obj[<span class="string">"name"</span>]=<span class="string">"佐助"</span>; <span class="comment">// 设置属性</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">"name"</span>]); <span class="comment">// 获取属性值</span></span><br><span class="line"></span><br><span class="line">obj[<span class="string">"play"</span>](); <span class="comment">// 调用方法</span></span><br></pre></td></tr></table></figure><h1 id="JSON格式的数据及遍历"><a href="#JSON格式的数据及遍历" class="headerlink" title="JSON格式的数据及遍历"></a>JSON格式的数据及遍历</h1><h2 id="JSON格式的数据"><a href="#JSON格式的数据" class="headerlink" title="JSON格式的数据"></a>JSON格式的数据</h2><ul><li><p>JSON格式的数据：一般都是成对的，是键值对</p></li><li><p>json也是一个对象，数据都是成对的，一般json格式的数据无论是键还是值都是用双引号括起来的</p></li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="string">"10"</span>,</span><br><span class="line">    <span class="string">"sex"</span>:<span class="string">"男"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><ul><li><p>遍历对象，是不能通过for循环遍历的</p></li><li><p>可以通过for-in循环</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"10"</span>,</span><br><span class="line">    <span class="string">"sex"</span>: <span class="string">"男"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// key是一个变量,这个变量中存储的是该对象的所有的属性的名字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> json) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key + <span class="string">"==========="</span> + json[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="简单类型和复杂类型"><a href="#简单类型和复杂类型" class="headerlink" title="简单类型和复杂类型"></a>简单类型和复杂类型</h1><ul><li>原始数据类型：number，string，boolean，undefined，null，object</li><li>简单类型（基本类型），值类型：number，string，boolean</li><li>复杂类型（引用类型）：object</li><li>空类型：undefined，null</li></ul><h2 id="值类型的值在哪一块空间中存储？"><a href="#值类型的值在哪一块空间中存储？" class="headerlink" title="值类型的值在哪一块空间中存储？"></a>值类型的值在哪一块空间中存储？</h2><p>在栈中存储</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/1498288494687.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="引用类型的值在哪一块空间中存储？"><a href="#引用类型的值在哪一块空间中存储？" class="headerlink" title="引用类型的值在哪一块空间中存储？"></a>引用类型的值在哪一块空间中存储？</h2><p>对象在堆上存储，地址在栈上存储</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/1498700592589.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="值类型和引用类型的传递"><a href="#值类型和引用类型的传递" class="headerlink" title="值类型和引用类型的传递"></a>值类型和引用类型的传递</h2><ul><li>值类型之间传递，传递的是值</li><li>引用类型之间传递，传递的是地址（引用）</li><li>值类型作为函数的参数，传递的是值</li><li>引用类型作为函数的参数，传递的是地址（引用）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编程思想&quot;&gt;&lt;a href=&quot;#编程思想&quot; class=&quot;headerlink&quot; title=&quot;编程思想&quot;&gt;&lt;/a&gt;编程思想&lt;/h1&gt;&lt;p&gt;把一些生活中做事的经验融入到程序中&lt;/p&gt;
&lt;h2 id=&quot;面向过程&quot;&gt;&lt;a href=&quot;#面向过程&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="JavaScript基础" scheme="https://www.chyds.cn/categories/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="前端" scheme="https://www.chyds.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://www.chyds.cn/tags/JavaScript/"/>
    
      <category term="学习" scheme="https://www.chyds.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第四节：作用域，预解析</title>
    <link href="https://www.chyds.cn/2019/01/28/%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%8C%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.chyds.cn/2019/01/28/第四节：作用域，预解析/</id>
    <published>2019-01-28T09:43:39.000Z</published>
    <updated>2019-01-29T08:47:28.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>作用域：使用范围</p><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>全局变量：声明的变量是使用var声明的，那么这个变量就是全局变量，全局变量可以在页面的任何位置使用</p><ul><li>除了函数以外，其他的任何位置定义的变量都是全局变量</li><li>全局变量，如果页面不关闭，那么就不会释放， 就会占空间，消耗内存</li></ul><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>局部变量：在函数内部定义的变量是局部变量，外面不能使用</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>全局作用域：全局变量的使用范围</p><h2 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h2><p>局部作用域：局部变量的使用范围</p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>块级作用域：一对大括号就可以看成是一块，在这块区域中定义的变量，只能在这个区域中使用，但是在js中在这个块级作用域中定义的变量，外面也能使用；</p><p>说明：js中没有块级作用域，只有函数除外</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h2 id="扩展：隐式全局变量"><a href="#扩展：隐式全局变量" class="headerlink" title="扩展：隐式全局变量"></a>扩展：隐式全局变量</h2><p>隐式全局变量：声明的变量没有var，就叫隐式全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    number = <span class="number">10</span>; <span class="comment">// 隐式全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(number); <span class="comment">// 隐式全局变量是全局作用域</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var num1 = 10; // 全局变量</span><br><span class="line">num2 = 20; // 隐式全局变量</span><br><span class="line">delete num1; // 把num1删除</span><br><span class="line">delete num2; // 把num2删除</span><br><span class="line">console.log(typeof num1); // number类型，说明num1没有被删除</span><br><span class="line">console.log(typeof num2); // undefined，说明num2被删除了</span><br></pre></td></tr></table></figure><p>全局变量是不能被删除的，隐式全局变量是可以被删除的</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ul><li>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。</li><li>将这样的所有的作用域列出来，可以有一个结构：函数内指向函数外的链式结构。就称作作用域链</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/06-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );</span><br><span class="line">    &#125;</span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/06-2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><p>预解析：提前解析代码</p><ul><li>把变量的声明提前了——提前到当前所在的作用域的最上面</li><li>函数的声明也会被提前——提前到当前所在的作用域的最上面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预解析前</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析后,把声明提前了</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//undefined</span></span><br><span class="line">num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预解析前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第一个f1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">f1(); <span class="comment">// 结果是：第二个f1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第二个f1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">f1(); <span class="comment">// 结果是：第二个f1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第一个f1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"第二个f1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">f1(); <span class="comment">// 结果是：第二个f1</span></span><br><span class="line">f1(); <span class="comment">// 结果是：第二个f1</span></span><br></pre></td></tr></table></figure><h2 id="预解析局部作用预的问题"><a href="#预解析局部作用预的问题" class="headerlink" title="预解析局部作用预的问题"></a>预解析局部作用预的问题</h2><ul><li>预解析中，变量的提升，只会在当前的作用预提升，提前到当前的作用域的最上面</li><li>函数中的变量只会在提前到当前的作用域的最前面，不会出去</li><li>预解析会分多段（多对script标签中函数重名，预解析的时候不会冲突）</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预解析前</span></span><br><span class="line">f1(); <span class="comment">// 不能调用</span></span><br><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析后</span></span><br><span class="line"><span class="keyword">var</span> f1;</span><br><span class="line">f1(); <span class="comment">// 不能调用</span></span><br><span class="line">f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预解析前</span></span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预解析后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;<span class="comment">//局部变量</span></span><br><span class="line">    a=<span class="number">9</span>;</span><br><span class="line">    <span class="comment">//隐式全局变量</span></span><br><span class="line">    b=<span class="number">9</span>;</span><br><span class="line">    c=<span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//9</span></span><br><span class="line">    <span class="built_in">console</span>.log(b);<span class="comment">//9</span></span><br><span class="line">    <span class="built_in">console</span>.log(c);<span class="comment">//9</span></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//  9</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 9</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h1&gt;&lt;p&gt;作用域：使用范围&lt;/p&gt;
&lt;h2 id=&quot;全局变量&quot;&gt;&lt;a href=&quot;#全局变量&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="JavaScript基础" scheme="https://www.chyds.cn/categories/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="前端" scheme="https://www.chyds.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://www.chyds.cn/tags/JavaScript/"/>
    
      <category term="学习" scheme="https://www.chyds.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第三节：break/continue关键字，数组，函数</title>
    <link href="https://www.chyds.cn/2019/01/28/%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%9Abreak-continue%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%8C%E6%95%B0%E7%BB%84%EF%BC%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://www.chyds.cn/2019/01/28/第三节：break-continue关键字，数组，函数/</id>
    <published>2019-01-28T03:47:07.000Z</published>
    <updated>2019-01-28T07:59:49.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h1><p>如果在循环中使用,遇到了break,则立刻跳出当前所在的循环</p><p>例子：找到100到200之间第一个可以被7整除的数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">7</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h1><p>在循环中如果遇到continue关键字,直接开始下一次循环</p><p>例子：求100-200之间所有的奇数的和（用continue）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">200</span>)&#123;</span><br><span class="line">    <span class="comment">//判断是不是偶数</span></span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//如果是偶数跳过这个数字</span></span><br><span class="line">        i++;<span class="comment">//102</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li>数组：一组有序的数据</li><li>数组的作用：可以一次性存储多个数据</li><li>数组元素：数组中存储的每个数据，都可以叫做数组的元素，比如：存储了3个数据，数组中有3个元素</li><li>数组长度：就是数组的元素的个数，比如有3个元素，这个数组的长度是3</li><li>数组索引（下标）：用来存储或者访问数组中数据</li></ul><h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><h3 id="通过构造函数创建数组"><a href="#通过构造函数创建数组" class="headerlink" title="通过构造函数创建数组"></a>通过构造函数创建数组</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 数组名 = new Array();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过构造函数的方式定义一个数组</span></span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 没有数组，空数组</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var 数组名 = new Array(长度);</span><br><span class="line">// 通过构造函数的方法创建的数组中没有数据，但是有长度，数组中的每个值就是undefined</span><br></pre></td></tr></table></figure><h3 id="通过字面量的方式创建数组"><a href="#通过字面量的方式创建数组" class="headerlink" title="通过字面量的方式创建数组"></a>通过字面量的方式创建数组</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 数组名 = []; // 空数组</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []; </span><br><span class="line"><span class="comment">// 创建一个包含3个数值的数组，多个数组项以逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]; </span><br><span class="line"><span class="comment">// 创建一个包含2个字符串的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'a'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过数组的length属性获取数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.length);</span><br><span class="line"><span class="comment">// 可以设置length属性改变数组中元素的个数</span></span><br><span class="line">arr3.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="总结数组基础知识"><a href="#总结数组基础知识" class="headerlink" title="总结数组基础知识"></a>总结数组基础知识</h2><ul><li>数组:存储一组有序的数据</li><li>数组的作用:一次性存储多个数据</li><li>数组的定义方式:<br>1.构造函数定义数组: var 数组名=new Array();<br>2.字面量方式定义数组: var 数组名=[];</li><li>var 数组名=new Array();空数组</li><li>var 数组名=new Array(值);数组定义了,有长度</li><li>var 数组名=new Array(值1,值2,值3….);定义数组并且有多个数据</li><li>var 数组名=[];空数组</li><li>var 数组名=[值1,值2,值3];有三个数据</li><li>数组元素:就是数组中存储的数据</li><li>数组长度:就是数组中元素的个数</li><li>数组索引(下标):从0开始,到数组的长度减1结束</li><li>通过下标设置数组的元素值: 数组名[索引]=值</li><li>通过下标访问数组的元素值: 数组名[索引]</li></ul><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>使用for循环遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 小于的是数组的长度--个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的案例"><a href="#数组的案例" class="headerlink" title="数组的案例"></a>数组的案例</h2><p>案例1：求数组中所有元素的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">sum += arr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p>案例2：求数组中所有元素中的最大值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">50</span>];</span><br><span class="line"><span class="comment">// 假设max变量中存储的是最大值</span></span><br><span class="line"><span class="keyword">var</span> max = arr2[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断这个变量的值和数组中每个元素的值是不是最大值</span></span><br><span class="line">    <span class="keyword">if</span> (max &lt; arr2[i]) &#123;</span><br><span class="line">    max = arr2[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例3：倒序遍历数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=arr3.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr3[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例4：把数组中每个元素用|拼接到一起产生一个字符串并输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names=[<span class="string">"卡卡西"</span>,<span class="string">"佐助"</span>,<span class="string">"鸣人"</span>,<span class="string">"大蛇丸"</span>,<span class="string">"雏田"</span>,<span class="string">"小苏"</span>,<span class="string">"凤姐"</span>,<span class="string">"黑崎一护"</span>];</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">""</span>;<span class="comment">// 空的字符串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;names.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">str+=names[i]+<span class="string">"|"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str+names[names.length<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure><p>案例5：去掉数组中重复的0，把其他的数据放在一个新的数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> newArr=[];<span class="comment">// 新数组,用来存放第一个数组中所有非0的数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">        newArr[newArr.length]=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把新数组的长度作为下标使用,数组的长度是可以改变的</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><p>案例6：反转数组======把数组中的数据的位置调换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="comment">// 循环的目的是控制交换的次数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 先把第一个元素的值放在第三方变量中</span></span><br><span class="line">    <span class="keyword">var</span> temp = array[i];</span><br><span class="line">    array[i] = array[array.length - <span class="number">1</span> - i];</span><br><span class="line">    array[array.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><h2 id="数组的冒泡排序"><a href="#数组的冒泡排序" class="headerlink" title="数组的冒泡排序"></a>数组的冒泡排序</h2><p>冒泡排序：把所有的数据按照一定的顺序进行排列(从小到大,从大到下)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">30</span>];</span><br><span class="line"><span class="comment">// 循环控制比较的轮数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 控制每一轮的比较的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>函数：把一坨重复的代码封装，在需要的时候直接调用</li><li>函数的作用：代码的重用</li></ul><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><p>函数声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名字()&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：<br>函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。<br>函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 <code>tellStory</code> <code>sayHello</code>等</p><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><p>调用函数的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure><p>特点：<br>函数体只有在调用的时候才会执行，调用需要()进行调用。<br>可以调用多次(重复使用)</p><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"吃了没？"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">sayHi();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1-100之间所有数的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span>  i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure><h2 id="函数的注意问题"><a href="#函数的注意问题" class="headerlink" title="函数的注意问题"></a>函数的注意问题</h2><ul><li>函数需要先定义，然后才能调用</li><li>函数名字：要遵循驼峰命名法</li><li>函数一旦重名，后面的会把前面的 函数覆盖</li></ul><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ul><li>在函数定义的时候，函数名字后面的小括号里的变量就是参数，目的是函数在调用的时候，接收用户传进来的值</li><li>此时函数定义的时候后面的小括号里的变量叫参数；写了两个变量，就有两个参数</li></ul><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部</span></span><br><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参...</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>形参和实参</p><ol><li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。</li><li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>, y = <span class="number">6</span>;</span><br><span class="line">fn(x,y); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y</span></span><br></pre></td></tr></table></figure><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值</p><p>返回值语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个带返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参...</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过变量来接收这个返回值</span></span><br><span class="line"><span class="keyword">var</span> 变量 = 函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。</p><p>返回值详解：<br>    如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined<br>    如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值<br>    如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined<br>    函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。</span><br></pre></td></tr></table></figure><h2 id="函数的参数和返回值的注意问题"><a href="#函数的参数和返回值的注意问题" class="headerlink" title="函数的参数和返回值的注意问题"></a>函数的参数和返回值的注意问题</h2><ul><li><p>有参数,有返回值的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有参数,无返回值的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>无参数,有返回值的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>无参数无返回值的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"萨瓦迪卡"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的案例"><a href="#函数的案例" class="headerlink" title="函数的案例"></a>函数的案例</h2><ol><li>求两个数字的和:获取任意的两个数字的和</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getSum(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure><ol><li>求1-n之间所有数的和</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">geteverySum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(geteverySum(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><ol><li>求n-m之间所有数的和</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">geteverySum2</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt;= m; i++) &#123;</span><br><span class="line">   sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(geteverySum2(<span class="number">1</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure><ol><li>判断一个数是否是素数(质数),只能被1和自身整除，质数是从2开始</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用这个数字和这个数字前面的所有的数字整除一次(没有1的,没有自身的)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimeNumber</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">2</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//说明有一个数字整除了,就没有必要向后继续整除了,此时就已经验证出不是质数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isPrimeNumber(<span class="number">8</span>)?<span class="string">"是质数"</span>:<span class="string">"不是质数"</span>);</span><br></pre></td></tr></table></figure><ol><li>通过函数实现冒泡排序</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 控制比较的轮数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 控制每一轮的比较次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;<span class="comment">//end if</span></span><br><span class="line">        &#125;<span class="comment">//end for</span></span><br><span class="line">    &#125;<span class="comment">//end for</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sortArray([<span class="number">0</span>, <span class="number">19</span>, <span class="number">34</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">2</span>]));</span><br></pre></td></tr></table></figure><ol><li>输入,年月日,获取这个日期是这一年的第多少天</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断这个年份是不是闰年</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLeapYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDays</span>(<span class="params">year, month, day</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 定义变量存储对应的天数</span></span><br><span class="line"><span class="keyword">var</span> days = day;</span><br><span class="line"><span class="comment">// 如果用户输入的是一月份,没必要向后算天数,直接返回天数</span></span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> days;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 代码执行到这里-----说明用户输入的不是1月份</span></span><br><span class="line"><span class="comment">// 定义一个数组,存储每个月份的天数</span></span><br><span class="line"><span class="keyword">var</span> months = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>];</span><br><span class="line"><span class="comment">// 小于的是输入的月份-1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; month - <span class="number">1</span>; i++) &#123;</span><br><span class="line">days += months[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要判断这个年份是不是闰年</span></span><br><span class="line"><span class="keyword">if</span>(isLeapYear(year)&amp;&amp;month&gt;<span class="number">2</span>)&#123;</span><br><span class="line">days++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getDays(<span class="number">2000</span>,<span class="number">3</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="函数的其他定义方式"><a href="#函数的其他定义方式" class="headerlink" title="函数的其他定义方式"></a>函数的其他定义方式</h2><p>命名函数：函数如果有名字，就是命名函数</p><p>匿名函数：函数如果没有名字，就是匿名函数</p><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>函数表达式：把一个函数给一个变量，此时形成了函数表达式</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 变量 = 匿名函数;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p>如果是函数表达式，那么此时前面的变量存储的就是一个函数，而这个变量就相当于是一个函数，就可以直接加小括号调用了</p><p>注意：函数表达式后面，赋值结束后，要加分号</p><h2 id="函数自调用"><a href="#函数自调用" class="headerlink" title="函数自调用"></a>函数自调用</h2><p>声明的同时，直接调用，一次性的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"直接调用"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="函数也是一种数据类型"><a href="#函数也是一种数据类型" class="headerlink" title="函数也是一种数据类型"></a>函数也是一种数据类型</h2><p>函数的数据类型是：function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f1)</span><br></pre></td></tr></table></figure><h2 id="函数作为参数使用"><a href="#函数作为参数使用" class="headerlink" title="函数作为参数使用"></a>函数作为参数使用</h2><p>如果一个函数作为参数使用，那么我们说这个参数（函数）为回调函数</p><p>只要看到一个函数作为参数使用了，那就是回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明，fn是变量，fn是参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="comment">// 函数调用===说明fn这个变量中存储的是一个函数</span></span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"哦，这也可以"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用f1函数，把f2的代码作为实参传给f1</span></span><br><span class="line">f1(f2);</span><br></pre></td></tr></table></figure><h2 id="函数作为返回值使用"><a href="#函数作为返回值使用" class="headerlink" title="函数作为返回值使用"></a>函数作为返回值使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f1函数调用了"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        consol.log(<span class="string">"返回的函数也调用了"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = f1();<span class="comment">// 调用f1函数并把返回值给fn</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;break关键字&quot;&gt;&lt;a href=&quot;#break关键字&quot; class=&quot;headerlink&quot; title=&quot;break关键字&quot;&gt;&lt;/a&gt;break关键字&lt;/h1&gt;&lt;p&gt;如果在循环中使用,遇到了break,则立刻跳出当前所在的循环&lt;/p&gt;
&lt;p&gt;例子：找到100
      
    
    </summary>
    
      <category term="JavaScript基础" scheme="https://www.chyds.cn/categories/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="前端" scheme="https://www.chyds.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://www.chyds.cn/tags/JavaScript/"/>
    
      <category term="学习" scheme="https://www.chyds.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第二节：流程控制，分支结构，循环结构</title>
    <link href="https://www.chyds.cn/2019/01/28/%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%9A%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%8C%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%EF%BC%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    <id>https://www.chyds.cn/2019/01/28/第二节：流程控制，分支结构，循环结构/</id>
    <published>2019-01-28T02:03:56.000Z</published>
    <updated>2019-01-29T08:46:37.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>代码的执行过程</p><ol><li>顺序结构：代码的执行顺序，从上到下，从左到右（不严谨）</li><li>分支结构：if语句，if-else语句，if-else if-else if…语句，switch-case语句，三元表达式语句</li><li>循环结构：while循环，do-while循环，for循环，后期还有一个for-in循环</li></ol><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>主要是判断</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(表达式)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：先判断表达式的结果是true还是false，如果是true则执行代码块，如果是flase，大括号中的代码块是不执行的</p><p>例子：如果8大于6，请输出8</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">8</span>&gt;<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h2><p>两个分支，只能执行一个分支</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(表达式)&#123;</span><br><span class="line">    代码1</span><br><span class="line">&#125;esle&#123;</span><br><span class="line">    代码2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：如果表达式的结果是true则执行代码1，如果表达式的结果是false，则执行代码2</p><p>例子：小苏的年龄是否是成年人，如果是成年人则提示，可以看电影，否则回家写作业</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提示用户输入年龄</span></span><br><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">"请您输入您的年龄"</span>);</span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"可以看电影了"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"回家写作业去"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>运算符： ? :</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 变量 = 表达式1? 表达式2: 表达式3;</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>表达式1的结果是true还是false，如果是ture则执行表达式2，然后把结果给变量</p><p>如果表达式1的结果是false，则执行表达式3，把结果给变量</p><p>例子：两个数字中的最大值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = x &gt; y ? x : y;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>总结：大多数情况，使用if-else的语句都可以用三元表达式的方式来表示</p><h2 id="if-else-if语句"><a href="#if-else-if语句" class="headerlink" title="if-else if语句"></a>if-else if语句</h2><p>if-else if-else if-else if……else——多个分支，最终也是执行一个</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(表达式1)&#123;</span><br><span class="line">    代码1</span><br><span class="line">&#125;else if(表达式2)&#123;</span><br><span class="line">    代码2</span><br><span class="line">&#125;else if(表达式3)&#123;</span><br><span class="line">    代码3</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    代码4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>else if——这种结构可以多多个，具体多少个看需求</p><p>else——结构是可以不用写的，具体也是看需求</p><p>执行过程：</p><p>先判断表达式1的结果，</p><p>如果为true则执行代码1</p><p>如果为false，则判断表达式2</p><p>如果表达式2为true则执行代码2</p><p>如果为flase则判断表达式3</p><p>如果表达式3为true则执行代码3</p><p>如果为false则执行代码4</p><p>例子：</p><p>成绩的结果在90到100之间则显示A级</p><p>如果成绩在80到90之间，则显示B级</p><p>如果成绩在70到80之间，则显示C级</p><p>如果成绩在60到70之间，则显示D级</p><p>如果成绩在0到60之间，则显示E级</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提示用户输入成绩</span></span><br><span class="line"><span class="keyword">var</span> score = <span class="built_in">Number</span>(prompt(<span class="string">"请输入您的成绩"</span>));</span><br><span class="line"><span class="comment">// 如果为true就说明 不是数字</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(score))&#123;</span><br><span class="line">    <span class="keyword">if</span>(score &gt; <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"A级"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">80</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"B级"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt; <span class="number">70</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"C级"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;=<span class="number">60</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"D级"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"E级"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"您输入有误"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch-case语句"></a>switch-case语句</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line">    case 值1:</span><br><span class="line">        代码1;</span><br><span class="line">        break;</span><br><span class="line">    case 值2:</span><br><span class="line">        代码2;</span><br><span class="line">        break;</span><br><span class="line">    case 值3:</span><br><span class="line">        代码3;</span><br><span class="line">        break;</span><br><span class="line">    case 值4:</span><br><span class="line">        代码4;</span><br><span class="line">        break;</span><br><span class="line">    ...多个case</span><br><span class="line">    default:</span><br><span class="line">        代码5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>获取表达式的值,和值1比较,如果一样,则执行代码1,遇到break则跳出整个的语句,后面代码不执行</p><p>如果表达式的值和值1不一样,则和值2比较,如果相同则执行代码2,遇到break则跳出</p><p>否则和值3比较,相同则执行代码3,遇到break,跳出</p><p>否则和值4比较,相同则执行代码4,遇到break则跳出</p><p>否则直接执行代码5</p><p>注意问题：</p><p>default后面的break是可以省略的</p><p>default也可以省略</p><p>switch-case 语句中和case后面的值比较的时候使用的是严格的模式</p><p>例子：获取一个人的成绩的级别,如果是A级则显示90到100直接的分数</p><p>如果是B级则显示80到90分</p><p>如果是C级则显示70到80之间分数</p><p>如果是D级则显示60到70分之间</p><p>否则显示0到59之间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jiBie = <span class="string">"E"</span>;</span><br><span class="line"><span class="keyword">switch</span> (jiBie) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"90到100之间"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"80到90之间"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"70到80之间"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"60到70之间"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"0到59之间"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：根据月份显示对应的天数</p><p>1,3,5,7,8,10,12 —31天</p><p>2—-28天</p><p>4,6,9,11—-30天</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> month = <span class="built_in">parseInt</span>(prompt(<span class="string">"请输入月份"</span>));</span><br><span class="line"><span class="keyword">switch</span> (month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"31天"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"30天"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"28天"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结分支语句"><a href="#总结分支语句" class="headerlink" title="总结分支语句"></a>总结分支语句</h2><ul><li>if-else语句:两个分支,最终只执行一个分支</li><li>if-else语句:两个分支,最终只执行一个分支</li><li>if-else if-else if…语句: 多个分支,也是只会执行一个</li><li>switch-case语句:多分支语句,最终也会一个(必须要有break)</li><li>三元表达式:和if-else语句是一样的</li><li>什么时候使用if-else if…: 一般是对范围的判断</li><li>什么时候使用switch-case语句:一般是对具体的值的判断</li><li>如果有多个分支,是针对范围的判断一般选择if-else if的语句</li><li>如果有多个分支,是针对具体的值判断,一般选择用switch-case语句</li></ul><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p>循环:一件事不停的或者是重复的做</p><p>循环要有结束的条件,循环还应该有计数器(记录循环的次数的)</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 计数器</span><br><span class="line">var 变量=0;</span><br><span class="line">while(循环的条件)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">    计数器++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程:</p><p>先判断条件是否成立,(条件的结果是true还是false),如果是false,那么循环的代码(while的大括号中的代码都不执行),如果是true,那么先执行循环体,然后执行计数器,然后,直接去—&gt;循环的条件,再次判断是否成立,成立则继续执行循环体,否则跳出循环,执行完循环体之后,计数器加1,然后再去循环的条件,判断,成立则循环,否则跳出循环</p><p>例子：计算1-100之间所有数字的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储最终的和</span></span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// 计数器</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    <span class="comment">// 不停的计算数字的和</span></span><br><span class="line">    sum+=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"和为:"</span>+sum);</span><br></pre></td></tr></table></figure><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;while(条件);</span><br></pre></td></tr></table></figure><p>执行过程：</p><p>先执行一次循环体,然后判断条件是否成立,不成立,则跳出循环,成立则执行循环体,然后再判断条件是否成立,成立则继续循环,否则跳出…..</p><p>例子：问用户:您觉得我帅吗?提示用户请输入y/n ,如果n就一直问,我帅不帅,如果用户输入的y,则结束,并提示用户,您真有眼光</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//把用户输入的结果存储到result变量中</span></span><br><span class="line"><span class="keyword">var</span> result = prompt(<span class="string">"您觉得我帅吗?y/n"</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (result != <span class="string">"y"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"您真有眼光"</span>);</span><br></pre></td></tr></table></figure><h2 id="总结while循环和do-while循环"><a href="#总结while循环和do-while循环" class="headerlink" title="总结while循环和do-while循环"></a>总结while循环和do-while循环</h2><p>while循环特点：先判断,后循环，有可能一次循环体都不执行</p><p>do-while循环特点：先循环，后判断,至少执行一次循环体</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(表达式1;表达式1;表达式3;)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程:</p><p>先执行一次表达式1,然后判断表达式2;如果不成立则直接跳出循环</p><p>如果表达式2成立,执行循环体的代码,结束后,跳到表达式3执行,然后跳到表达式2,判断表达式2是否成立,不成立,则跳出循环</p><p>如果表达式2成立,则执行循环体,然后再跳到表达式3,再跳到表达式2,判断是否成立,一直如此</p><p>例子：求1-100之间所有数字的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"和为:"</span> + sum);</span><br></pre></td></tr></table></figure><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>调试代码——高级程序员都是从调试开始的</p><p>调试：写代码——打开浏览器——F12(开发人员工具)——Sources——双击文件，在某一行代码前面点击一下(出现的东西就是断点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    sum+=i;<span class="comment">// 观察一下这个变量的值是多少,或者这行代码执行后的效果如何</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;p&gt;代码的执行过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序结构：代码的执行顺序，从上到下，从左到右（不严谨）&lt;/li&gt;
&lt;li&gt;分支结构
      
    
    </summary>
    
      <category term="JavaScript基础" scheme="https://www.chyds.cn/categories/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="前端" scheme="https://www.chyds.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://www.chyds.cn/tags/JavaScript/"/>
    
      <category term="学习" scheme="https://www.chyds.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一节：JS的介绍，变量，数据类型，运算符</title>
    <link href="https://www.chyds.cn/2019/01/27/%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%9Ajs%E7%9A%84%E4%BB%8B%E7%BB%8D%EF%BC%8C%E5%8F%98%E9%87%8F%EF%BC%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://www.chyds.cn/2019/01/27/第一节：js的介绍，变量，数据类型，运算符/</id>
    <published>2019-01-27T12:50:16.000Z</published>
    <updated>2019-01-29T08:45:36.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的介绍"><a href="#JavaScript的介绍" class="headerlink" title="JavaScript的介绍"></a>JavaScript的介绍</h1><h2 id="JavaScript是什么？"><a href="#JavaScript是什么？" class="headerlink" title="JavaScript是什么？"></a>JavaScript是什么？</h2><ul><li>是一门脚本语言：不需要编译，直接运行</li><li>是一门解释性的语言：遇到一行代码就执行一行代码</li><li>是一门动态类型的语言：</li></ul><ol><li>代码(变量)只有执行到这个位置的时候,才知道这个变量中到底存储的是什么,如果是对象,就有对象的属性和方法,如果是变量就是变量的作用</li><li>对象没有什么,只要点了,通过点语法,那么就可以为对象添加属性或者方法</li></ol><ul><li>是一门基于对象的语言</li><li>是一门弱类型的语言：声明变量的时候使用var</li></ul><h2 id="JS分为三个部分"><a href="#JS分为三个部分" class="headerlink" title="JS分为三个部分"></a>JS分为三个部分</h2><ol><li><p>ECMAScript标准：js的基本语法</p></li><li><p>DOM</p></li><li><p>BOM</p></li></ol><h2 id="JS用了将近10天来发明的"><a href="#JS用了将近10天来发明的" class="headerlink" title="JS用了将近10天来发明的"></a>JS用了将近10天来发明的</h2><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用"></a>变量的作用</h2><p>操作数据，读取数据</p><h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><p>var 变量名字;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br></pre></td></tr></table></figure><h2 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h2><p>var 变量名字=值;——字面量的方式赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"这是一个字符串"</span>;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>js中大小写是区分的</li><li>js中的字符串可以使用单引号，也可以使用双引号</li><li>js中每行代码结束都要有分号 ;</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="js中的原始数据类型"><a href="#js中的原始数据类型" class="headerlink" title="js中的原始数据类型"></a>js中的原始数据类型</h2><ul><li>number 数字类型</li><li>string 字符串类型</li><li>boolean 布尔类型</li><li>undefined 未定义</li><li>null 空</li><li>object 对象</li></ul><p>null和undefined数据是没有太大意义的，null是很有意义的—对象的时候解释</p><p>NaN——不是一个数字，不是一个数字和一个数字计算——结果就是NaN</p><p>isNaN()——判断这个变量或者这个值是不是“不是一个数字”——如果不是一个数字结果就是true，如果是一个数字结果就是false</p><h2 id="number数据类型"><a href="#number数据类型" class="headerlink" title="number数据类型"></a>number数据类型</h2><p>无论是整数还是小数都是number数据类型的</p><h2 id="string数据类型"><a href="#string数据类型" class="headerlink" title="string数据类型"></a>string数据类型</h2><p>字符串</p><p>获取字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名.length</span><br></pre></td></tr></table></figure><h2 id="null数据类型"><a href="#null数据类型" class="headerlink" title="null数据类型"></a>null数据类型</h2><p>只有一个值，null</p><h2 id="undefined数据类型"><a href="#undefined数据类型" class="headerlink" title="undefined数据类型"></a>undefined数据类型</h2><p>只有一个，undefined，一个变量声明了，没有赋值</p><h2 id="object数据类型"><a href="#object数据类型" class="headerlink" title="object数据类型"></a>object数据类型</h2><p>对象</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="其他类型转数字"><a href="#其他类型转数字" class="headerlink" title="其他类型转数字"></a>其他类型转数字</h2><p>转整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>()</span><br></pre></td></tr></table></figure><p>转小数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>()</span><br></pre></td></tr></table></figure><p>转数字类型——比上面两个严格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>()</span><br></pre></td></tr></table></figure><h2 id="其他类型转字符串"><a href="#其他类型转字符串" class="headerlink" title="其他类型转字符串"></a>其他类型转字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.toString();</span><br><span class="line"><span class="built_in">String</span>();</span><br></pre></td></tr></table></figure><h2 id="其他类型转布尔类型"><a href="#其他类型转布尔类型" class="headerlink" title="其他类型转布尔类型"></a>其他类型转布尔类型</h2><p>要么是true要么是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>()</span><br></pre></td></tr></table></figure><h1 id="运算符——操作符"><a href="#运算符——操作符" class="headerlink" title="运算符——操作符"></a>运算符——操作符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * <span class="regexp">/ %</span></span><br></pre></td></tr></table></figure><h2 id="复合运算符"><a href="#复合运算符" class="headerlink" title="复合运算符"></a>复合运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+= -= *= <span class="regexp">/= %=</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>优先级是最低的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=</span><br></pre></td></tr></table></figure></p><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++ --</span><br></pre></td></tr></table></figure><p>如果++在后面：如num++ +10参与运算</p><p>先参与运算，运算结束后自身加1</p><p>如果++在前面：如++num+10参与运算</p><p>先自身加1，然后再参与运算</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? :</span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符的结果是布尔类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt; &gt;= &lt;= == === != !==</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符的结果是布尔类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; || !</span><br></pre></td></tr></table></figure><p>如果有一个为false，整个结果就是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span>&amp;&amp;表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><p>只有一个为ture，整个结果就是true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span>||表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><p>结果就是取反</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!表达式</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript的介绍&quot;&gt;&lt;a href=&quot;#JavaScript的介绍&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的介绍&quot;&gt;&lt;/a&gt;JavaScript的介绍&lt;/h1&gt;&lt;h2 id=&quot;JavaScript是什么？&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="JavaScript基础" scheme="https://www.chyds.cn/categories/JavaScript%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="前端" scheme="https://www.chyds.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://www.chyds.cn/tags/JavaScript/"/>
    
      <category term="学习" scheme="https://www.chyds.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo+Github搭建博客</title>
    <link href="https://www.chyds.cn/2018/09/16/Hexo-Github-Start-a-Blog/"/>
    <id>https://www.chyds.cn/2018/09/16/Hexo-Github-Start-a-Blog/</id>
    <published>2018-09-16T00:28:55.000Z</published>
    <updated>2019-01-28T14:47:22.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大概分为以下几个步骤</p><ol><li>安装node.js</li><li>安装Git</li><li>安装Hexo</li><li>本地运行Hexo</li><li>托管到Github</li></ol><h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h1><p>Hexo是基于nodeJS环境的静态博客</p><blockquote><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">飞机直达</a></p></blockquote><h2 id="根据自己的Windows版本选择相应的安装版本"><a href="#根据自己的Windows版本选择相应的安装版本" class="headerlink" title="根据自己的Windows版本选择相应的安装版本"></a>根据自己的Windows版本选择相应的安装版本</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blogSnipaste_2018-09-16_11-00-11.png" alt="node.js" title="">                </div>                <div class="image-caption">node.js</div>            </figure><p>保持默认，一路Next，直到安装完成</p><h2 id="检查node环境是否正常"><a href="#检查node环境是否正常" class="headerlink" title="检查node环境是否正常"></a>检查node环境是否正常</h2><p>快捷键Win+R，打开运行窗口</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blog/Snipaste_2018-09-16_11-15-28.png" alt="运行窗口" title="">                </div>                <div class="image-caption">运行窗口</div>            </figure><p>在运行窗口中输入cmd，回车，打开命令行界面<br>在命令行中输入</p><blockquote><p>node -v<br>npm -v</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blog/Snipaste_2018-09-16_11-28-32.png" alt="命令行" title="">                </div>                <div class="image-caption">命令行</div>            </figure><p>如图所示显示版本号，则安装正常</p><h1 id="安装Git环境"><a href="#安装Git环境" class="headerlink" title="安装Git环境"></a>安装Git环境</h1><h2 id="下载安装Git"><a href="#下载安装Git" class="headerlink" title="下载安装Git"></a>下载安装Git</h2><blockquote><p> <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">飞机直达</a></p></blockquote><p>下载完成后打开安装包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blog/Snipaste_2018-09-16_12-40-14.png" alt="Git" title="">                </div>                <div class="image-caption">Git</div>            </figure><p>大部分安装默认设置，只有下图需要选择第二项</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blog/Snipaste_2018-09-16_12-42-20.png" alt="Git" title="">                </div>                <div class="image-caption">Git</div>            </figure><h2 id="检查Git环境是否正常"><a href="#检查Git环境是否正常" class="headerlink" title="检查Git环境是否正常"></a>检查Git环境是否正常</h2><p>安装完成后打开命令行，输入：</p><blockquote><p>git –version</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blog/Snipaste_2018-09-16_12-47-30.png" alt="命令行" title="">                </div>                <div class="image-caption">命令行</div>            </figure><p>如图所示显示版本号，则安装正常</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="使用npm安装Hexo"><a href="#使用npm安装Hexo" class="headerlink" title="使用npm安装Hexo"></a>使用npm安装Hexo</h2><p>打开命令行</p><blockquote><p>npm install -g hexo-cli</p></blockquote><p>等待安装完成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-08-07.png" alt="命令行" title="">                </div>                <div class="image-caption">命令行</div>            </figure><h2 id="检查安装状态"><a href="#检查安装状态" class="headerlink" title="检查安装状态"></a>检查安装状态</h2><blockquote><p>hexo -v</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-18-12.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果你看到了如图文字，则说明已经安装成功了。</p><h1 id="体验hexo"><a href="#体验hexo" class="headerlink" title="体验hexo"></a>体验hexo</h1><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><p>新建一个文件夹，用来存放博客的文件</p><p>打开命令行cd到新建的目录</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-19-45.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入初始化命令</p><blockquote><p>hexo init</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-24-43.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>完成之后可以看到文件夹下多了这些文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-25-56.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><h2 id="本地运行hexo"><a href="#本地运行hexo" class="headerlink" title="本地运行hexo"></a>本地运行hexo</h2><p>打开命令行cd到博客的目录</p><p>输入命令生成页面</p><blockquote><p>hexo g <em>//generetor的缩写</em></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-33-19.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入命令启动本地服务</p><blockquote><p> hexo s <em>//server的缩写</em></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-34-49.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>启动成功，浏览器输入地址访问</p><blockquote><p><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-36-26.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果看到这个样子，恭喜你已经成功在本地运行博客了</p><h1 id="托管到GitHub"><a href="#托管到GitHub" class="headerlink" title="托管到GitHub"></a>托管到GitHub</h1><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><p>如果已经有账号了可以跳过此步</p><p>打开GitHub</p><blockquote><p><a href="https://github.com/" target="_blank" rel="noopener">飞机直达</a></p></blockquote><p>填写用户名，邮箱，密码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_11-57-10.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Github会发送一封注册确认的邮件，收到邮件后确认注册</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>登录GitHub点击头像旁边的+号图标</p><p>选择第一项 new erpository</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_12-04-25.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>仓库名称填写格式，因为我创建过了所以提示已存在</p><blockquote><p>用户名.github.io</p></blockquote><p>填写完后点击Create repository 创建仓库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_12-10-28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>创建完成后点击Settings 设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_12-18-16.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>页面向下拉，直到看见GitHub Pages</p><p>点击 launch automatic page generator</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/9fe4afa0gw1falk2bef2zj20di0423yw.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>之后会跳转一个页面 点击 continue to layouts</p><p>跳转后点击Publish page 发布页面</p><p>发布完成后就可以在浏览器输入 用户名.github.io 访问了</p><h2 id="配置git个人信息"><a href="#配置git个人信息" class="headerlink" title="配置git个人信息"></a>配置git个人信息</h2><p>如果你已经配置过个人信息请跳过这个步骤</p><p>设置git的user name和email</p><p>在博客文件夹目录右键–Git Base Here</p><blockquote><p>git config –global user.name “用户名”<br>git config –global user.email “邮箱”</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_13-02-00.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>生成密钥</p><p>输入命令，连续三个回车，会生成两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator\.ssh）</p><blockquote><p>ssh-keygen -t rsa -C “邮箱”</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_13-08-30.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-16-13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>打开GitHub进入设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-17-23.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击SSH and GPG keys进入SSH配置页，再点击New SSH key添加新的密钥</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-19-57.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Title填写一个名称（一般用来区分不同的主机），用文本工具打开id_rsa.pub复制到key里</p><p>点击Add SSH key输入密码保存</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-23-46.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="托管代码"><a href="#托管代码" class="headerlink" title="托管代码"></a>托管代码</h2><p>把代码托管到GitHub之前先配置hexo的上传信息</p><p>打开博客文件夹找到_config.yml文件并打开找到Deployment，然后按照如下修改：</p><blockquote><p>deploy:<br>  type: git<br>  repository:<br>    github: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:用户名/用户名.github.io.git<br>  branch: master</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-32-28.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在博客目录右键—&gt;Git Bash Here</p><p>输入命令生成静态页面</p><blockquote><p>hexo d</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-44-13.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>输入命令上传代码</p><blockquote><p>hexo d</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-45-48.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再次访问你的网站，这个地址就是你博客的地址，我们的博客已经搭建完成了！</p><blockquote><p>用户名.github.io</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/Snipaste_2019-01-26_16-49-03.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><blockquote><p>hexo clean  //清除缓存文件 <code>db.json</code> 和已生成的静态文件 <code>public</code></p><p>hexo g  //生成网站静态文件到默认设置的 <code>public</code> 文件夹</p><p>hexo s  //启动本地服务器，默认地址： <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>hexo d  //部署到设定的仓库</p></blockquote><p>每次更新博客先生成静态页面再上传</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大概分为以下几个步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装node.js&lt;/li&gt;
&lt;li&gt;安装Git&lt;/li&gt;
&lt;li&gt;安装Hexo&lt;/li&gt;

      
    
    </summary>
    
      <category term="教程" scheme="https://www.chyds.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://www.chyds.cn/tags/Hexo/"/>
    
      <category term="Github" scheme="https://www.chyds.cn/tags/Github/"/>
    
      <category term="教程" scheme="https://www.chyds.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="博客" scheme="https://www.chyds.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3 安装以及汉化等常用插件</title>
    <link href="https://www.chyds.cn/2018/04/10/sublime-text3-install/"/>
    <id>https://www.chyds.cn/2018/04/10/sublime-text3-install/</id>
    <published>2018-04-10T15:43:42.000Z</published>
    <updated>2019-01-28T03:23:38.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载Sublime-Text3"><a href="#下载Sublime-Text3" class="headerlink" title="下载Sublime Text3"></a>下载Sublime Text3</h1><p>到官网下载Sublime Text3 安装包</p><p>链接附上：<a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">https://www.sublimetext.com/3</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blog/2018.4.11/1523456993%281%29.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>按照你的系统下载向对应的安装包</p><h1 id="安装Sublime-Text3"><a href="#安装Sublime-Text3" class="headerlink" title="安装Sublime Text3"></a>安装Sublime Text3</h1><p>打开下载好的安装包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/blog/2018.4.11/1523457852%281%29.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以按照默认一路安装下去，也可以修改安装位置，自己决定</p><h1 id="安装Package-Control插件管理器以及汉化插件"><a href="#安装Package-Control插件管理器以及汉化插件" class="headerlink" title="安装Package Control插件管理器以及汉化插件"></a>安装Package Control插件管理器以及汉化插件</h1><p>Sublime刚安装好后是英文的，要安装一个插件管理器和汉化插件</p><h2 id="安装Package-Control插件管理器"><a href="#安装Package-Control插件管理器" class="headerlink" title="安装Package Control插件管理器"></a>安装Package Control插件管理器</h2><blockquote><p>Package Control是Sulime的插件管理器，可以添加、删除、查询插件等</p></blockquote><p>1、打开 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">https://packagecontrol.io/installation</a></p><p>2、复制Sublime Text3的代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/1524660809%281%29.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>3、打开Sublime快捷键CTRL+`，打开控制台</p><p>4、把刚刚复制的代码粘贴到控制台然后回车安装</p><h2 id="安装汉化插件"><a href="#安装汉化插件" class="headerlink" title="安装汉化插件"></a>安装汉化插件</h2><p>1、打开Sublime 选择Preferences &gt; Package Control  或者使用快捷键 Ctrl+Shift+p</p><p>2、输入install 选择 Package Control: install Package 回车确认选择</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/1524662922.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>3、输入ChineseLocalizations 汉化插件名称，回车确认安装</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.chyds.cn/1524663129%281%29.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="常用插件推荐"><a href="#常用插件推荐" class="headerlink" title="常用插件推荐"></a>常用插件推荐</h1><blockquote><p>插件的安装方法参照上面的安装汉化插件</p></blockquote><h2 id="A-File-Icon"><a href="#A-File-Icon" class="headerlink" title="A File Icon"></a>A File Icon</h2><p>功能：侧边栏文件图标</p><h2 id="All-Autocomplete"><a href="#All-Autocomplete" class="headerlink" title="All Autocomplete"></a>All Autocomplete</h2><p>功能：搜索所有打开的文件来寻找匹配的提示词</p><h2 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a>AutoFileName</h2><p>功能：文件路径补全</p><h2 id="Boxy-Theme"><a href="#Boxy-Theme" class="headerlink" title="Boxy Theme"></a>Boxy Theme</h2><p>功能：主题</p><p>使用：首选项 &gt; 主题</p><h2 id="ColorHighlighter"><a href="#ColorHighlighter" class="headerlink" title="ColorHighlighter"></a>ColorHighlighter</h2><p>功能：颜色代码选中高亮</p><h2 id="DocBlockr"><a href="#DocBlockr" class="headerlink" title="DocBlockr"></a>DocBlockr</h2><p>功能：注释</p><h2 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h2><p>功能：代码快捷键</p><p>使用方法：<a href="https://docs.emmet.io/cheat-sheet/" target="_blank" rel="noopener">https://docs.emmet.io/cheat-sheet/</a></p><h2 id="LESS"><a href="#LESS" class="headerlink" title="LESS"></a>LESS</h2><p>功能：代码高亮</p><h2 id="Less2css"><a href="#Less2css" class="headerlink" title="Less2css"></a>Less2css</h2><p>功能：Less编译</p><p>less2css依赖lessc这个工具</p><p><a href="https://github.com/duncansmart/less.js-windows" target="_blank" rel="noopener">飞机直达</a></p><p>把目录地址加入到环境变量PATH的中，如D:\less.js-windows-master</p><h2 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h2><p>功能：增强侧边栏</p><h2 id="Sublimerge"><a href="#Sublimerge" class="headerlink" title="Sublimerge"></a>Sublimerge</h2><p>功能：文件对比</p><h2 id="TortoiseSVN"><a href="#TortoiseSVN" class="headerlink" title="TortoiseSVN"></a>TortoiseSVN</h2><p>功能：在sublime中进行svn相关操作</p><p>Setting-User配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Auto close update dialog when no errors, conflicts and merges</span><br><span class="line">    "autoCloseUpdateDialog": false,</span><br><span class="line">    // Auto close commit dialog when no errors, conflicts and merges</span><br><span class="line">    "autoCloseCommitDialog": true,</span><br><span class="line"></span><br><span class="line">　　"tortoiseproc_path": "D:\Tool\TortoiseSVN\bin\TortoiseProc.exe" </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D:\Tool\TortoiseSVN\bin\TortoiseProc.exe 表示的是SVN客户端的安装路径，此路径请自行修改</p><h2 id="View-in-Browser"><a href="#View-in-Browser" class="headerlink" title="View in Browser"></a>View in Browser</h2><p>功能：在浏览器中打开</p><h2 id="cssrem"><a href="#cssrem" class="headerlink" title="cssrem"></a>cssrem</h2><p>功能：px转rem</p><p>Setting-User配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> "px_to_rem":20, // px转rem的单位比例</span><br><span class="line"> "max_rem_fraction_length":6, // px转rem的小数部分的最大长度</span><br><span class="line"> "available_file_types":[".html",".css",".less",".sass"], // 启用此插件的文件类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML-CSS-JS-Prettify"><a href="#HTML-CSS-JS-Prettify" class="headerlink" title="HTML-CSS-JS Prettify"></a>HTML-CSS-JS Prettify</h2><p>功能：格式化代码</p><p>依赖node.js</p><p>Plugin Options - Default配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"node_path":</span><br><span class="line">   &#123;</span><br><span class="line">       "windows": "C:/Program Files/nodejs/node.exe", // node.js的安装目录</span><br><span class="line">       "linux": "/usr/bin/nodejs",</span><br><span class="line">       "osx": "/usr/local/bin/node"</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><h2 id="liveReload"><a href="#liveReload" class="headerlink" title="liveReload"></a>liveReload</h2><p>功能：浏览器自动刷新</p><p>需要在浏览器安装相应的插件</p><h2 id="SublimeCodeIntel"><a href="#SublimeCodeIntel" class="headerlink" title="SublimeCodeIntel"></a>SublimeCodeIntel</h2><p>功能：多语言代码智能提示</p><h2 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h2><p>功能：调色板</p><p>使用：快捷键 Ctrl+Shift+C</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;下载Sublime-Text3&quot;&gt;&lt;a href=&quot;#下载Sublime-Text3&quot; class=&quot;headerlink&quot; title=&quot;下载Sublime Text3&quot;&gt;&lt;/a&gt;下载Sublime Text3&lt;/h1&gt;&lt;p&gt;到官网下载Sublime Text3
      
    
    </summary>
    
      <category term="教程" scheme="https://www.chyds.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="https://www.chyds.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Sublime Text3" scheme="https://www.chyds.cn/tags/Sublime-Text3/"/>
    
      <category term="前端" scheme="https://www.chyds.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
